<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml-stylesheet type="text/xsl" href="./modx.prosilver.en.xsl"?>
<!--For security purposes, please check: http://www.phpbb.com/mods/ for the latest version of this MOD. Although MODs are checked before being allowed in the MODs Database there is no guarantee that there are no security problems within the MOD. No support will be given for MODs not found within the MODs Database which can be found at http://www.phpbb.com/mods/-->
<mod xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.phpbb.com/mods/xml/modx-1.2.5.xsd">
	<header>
		<license>http://opensource.org/licenses/gpl-license.php GNU General Public License v2</license>

		<title lang="en">Proxy Revealer Olympus</title>

		<description lang="en">Tries to determine whether someone's IP address is masked (or known to be abusive), attempts to determine their "real" IP address - where possible, and "blocks" such people.</description>

		<author-notes lang="en"><![CDATA[

Overview
---------

Probably the easiest way to hide one's IP address is to use an open HTTP/SOCKS4/SOCKS5 proxy or to use a so-called CGI proxy.  These techniques, however, aren't fool-proof.  Transparent HTTP proxies, for instance, include an X-Forwarded-For header that usually includes the originating IP address.

Code can also be ran on the client-side to reveal more information.  Since Java's Socket and URLRequest objects allow for bypassing the browsers connection settings when connecting to the network, we can use Java to attempt to make a direct connection to the server as well.  Also, some CGI proxies maintain anonymity by rewritting all URLs to go through them.  Unfortunately, as XSS vulnerabilities often demonstrate, filtering HTML isn't as easy a task as one might initially think. In theory, all one need do to thwart the XSS-like approach is to simply update their CGI proxy to account for it.  Of course, just because the developer of that CGI proxy updates doesn't mean that every website using that CGI proxy will update to the latest version.

The Java part of this mod will not work with boards that are password protected by a .htaccess file. The source code (HttpRequestor.java) can be found in the contrib directory. If you're want to compile that file yourself:
For maximum compatability use: "javac HttpRequestor.java -source 1.3 -target 1.1"
And to bundle it into a JAR archive: "jar cvf HttpRequestor.jar HttpRequestor.class"

As we are no longer using a signed Java applet, we're now restricted to connecting only to origin-host. This means that, if someone was visiting the site through a CGI-Proxy server, and the Java applet was downloaded from that CGI-Proxy server, Java would not be able to connect back to our server to log the real IP.

Flash is an added method of detection, similar to the Java applet employed in this MOD. The Flash method uses XMLSocket() to circumvent the browsers proxy settings, attempts to make a direct connection to the server on a custom port where we run a small perl daemon script that returns the real IP to the (hidden) flash plugin, which in turn submits this information back to our webserver. And even though we're forced by Adobe's new Flash security model to run a daemon (for Policy File requests) on the server to authorize XMLSocket connections, this has the added advantage of a guaranteed direct-connect-back even if the Flash plugin was downloaded from a different host. In other words, if someone visited the site through a CGI-Proxy server, and the Flash movie was downloaded from that CGI-Proxy server, Flash would still be able to connect back (directly) to our server to log the real IP - submitted via a URL request, provided the xmlsockd.pl daemon script is running on the server to authorize the XMLSocket connection.

The source code of the flash addon is also available in the contrib directory. If you want to publish that file yourself, you need to have Adobe Flash CS3 (or later).  If you only want to look at the source code of it, you can just open the HttpRequestor.as file in your favorite text editor :)


Flash Detection Additional Setup Requirement
--------------------------------------------

To be able to take advantage of the Flash detection technique, you need to have shell access on your server (or access to cron/task manager) to run xmlsockd.pl daemon script (as a normal user) on an unfiltered port and in a directory where it has write access so it can write the PID (and optionally log) file. It is recommended that this directory be outside the document root of your site. The scripts are available in the contrib/daemon/ directory.

Choose only one of the following two perl scripts to run:

1. xmlsockd.pl: What most admins want to run.
  - Single Threaded script which could handle a few simultaneous connections at the same time. (meaning few milliseconds). Multiplexing using IO::Select to handle multiple clients, in case there are some lazy/slow clients who take their sweet time to send their request, we dont want to delay the rest - so the ip checking could be done quickly).
  - Supports logging, optional configuration of port, logging connections
  - Supports being invoked from shell, or via @reboot or periodically from cron
  
2. xmlsockd-basic.pl: A barebone version of the script above. For admins who run on systems with very limited perl installations that don't have the modules needed to run xmlsockd.pl such as IO::Socket, IO::Select, Log::Dispatch, Proc::PID::File, etc...

If your server is running Linux/BSD OS, then it most likely runs vixiecron, which allows you to use the @reboot syntax in crontab, so that your script can be automatically restarted after reboot.

Example:
$ crontab -e
  (add the following line to your crontab:)
@reboot $HOME/private/xmlsockd.pl
  Assuming your xmlsockd.pl script lies in the path $HOME/private/xmlsockd.pl ($HOME is your home dir)

 
To test if it's working properly (provided you have netcat installed):
$ perl -e 'printf "<policy-file-request/>%c",0' | nc yourhost.com 9999
$ perl -e 'printf "<request>getmyip</request>%c",0' | nc yourhost.com 9999

Additional Information
----------------------
SVN: http://code.google.com/p/proxy-revealer/source/checkout
		]]></author-notes>

		<author-group>
			<author>
				<realname>Jasmine Hasan</realname>
				<email>jasmine.aura@yahoo.com</email>
				<username>jasmineaura</username>
				<homepage>http://code.google.com/p/proxy-revealer/</homepage>
				<contributions-group>
					<contributions status="current" position="Current Developer"></contributions>
				</contributions-group>
			</author>
			<author>
				<realname>Jim Wigginton</realname>
				<email>terrafrost@phpbb.com</email>
				<username>TerraFrost</username>
				<homepage>http://www.frostjedi.com/terra/wordpress/</homepage>
				<contributions-group>
					<contributions status="past" position="Past Developer (phpBB2), Occasional Contributor"></contributions>
				</contributions-group>
			</author>
		</author-group>

		<mod-version>0.3.4</mod-version>

		<installation>
			<level>intermediate</level>
			<time>1200</time>
			<target-version>3.0.7-PL1</target-version>
		</installation>

		<history>
			<entry>
				<date>2008-10-05</date>
				<rev-version>0.3.3</rev-version>
				<changelog lang="en">
					<change>Simplified deferred tests checking in the functions.php modification. Deferring the new "RealPlayer" method should now work. Value of ip_block_defer is now passed as is to probe.php?mode=misc since probe.php does its own deferred tests checking in "misc" mode before initiating any of the tests in it.</change>
					<change>Updated the acp module to pass $id to display_ip_log() from main() as it's used in the links to "Internal IPs" and "Exceptions" displayed from the heading explanation in "External IPs", and used in the link to "External IPs" displayed from the heading explanation in "Internal IPs". Thanks Geisthund!</change>
					<change>Added output buffering in probe.php's mode "misc" so we can send output to browser immediately after it's available then let the server-side checks run in the background. This is to allow the client's browser to begin downloading the embedded plugins sooner and finish faster.</change>
					<change>Removed $user->setup() from probe.php. Since it's not user-facing, we don't need to setup user-specific items (like language, style, etc). More importantly, since the blocking in session.php is done from function user(), not calling $user->setup() in probe.php guarantees that if some quick test(s) trigger(s) a session-block (like TorDNSEL, or DNSBL), other tests connecting back with possible useful info (such as the Real IP) don't get blocked before submitting this info - if they use the same session (ex. flash, real_html/realplayer, xss).</change>
					<change>TOR_IPS method and language names renamed to TOR_DNSEL and "Tor-DNSEL", respectively.</change>
					<change>Some changes made to proxy_revealer.php language file for sake of clarity/correctness.</change>
					<change>Updated installer's database schema files (for new installs) and added an update mode to upgrade to 0.3.3, because the SPECULATIVE_TABLE's "method" column type changed from TINT to USINT. This is because TINT is a signed tinyint in mysql (according to phpbb schemas) which has a max value of 127. And since the newly added method PROXY_DNSBL (defined in constants.php) needed a value of 128, this sql column type change was necessary. On the other hand, USINT, which is an unsigned smallint in mysql, has a max value of 65535, which should be sufficient to allow for adding more new methods in the future if needed (such as PROXY_SCAN which would be 256).</change>
					<change>Added the PROXY_DNSBL (Proxy-DNSBL) detection method (allows blocking IPs listed as Open HTTP/SOCKS proxies in the appropriate DNSBLs).</change>
				</changelog>
			</entry>
			<entry>
				<date>2008-10-02</date>
				<rev-version>0.3.2</rev-version>
				<changelog lang="en">
					<change>Changed HttpRequestor.java code so that it uses protocol/domain/port parameters passed to it from (updated) probe.php rather than discovering them with getCodeBase().* since getCodeBase.getHost() could be a CGI-Proxy if one was used. This allows Java detection to work with CGI-Proxies.</change>
					<change>Minor fix to HttpRequestor.java that caused an error (only visible in Java console) about failing to getOutputStream after getInputstream. We now post something to output stream before trying to open the input stream to guarantee that the direct URL request is sent.</change>
					<change>Introduced the "RealPlayer" detection method.</change>
				</changelog>
			</entry>
			<entry>
				<date>2008-10-01</date>
				<rev-version>0.3.1</rev-version>
				<changelog lang="en">
					<change>Updated HttpRequestor.java code to use URLRequest instead of Socket and added support for HTTPS. Bundled HttpRequestor.class as a .jar archive so it could be signed with Thawte certificate using jarsigner. Updated probe.php accordingly and removed some of the old unecessary code that was needed for the previously described server-side workaround for the unsigned Java applet reverse-lookup issue.</change>
				</changelog>
			</entry>
			<entry>
				<date>2008-09-28</date>
				<rev-version>0.3.0</rev-version>
				<changelog lang="en">
					<change>Moved the language entries that were previously added to language/en/acp/common.php to a seperate file (language/en/mods/info_acp_proxy_reveler.php) to cut down on file edits to core phpBB and to ease translation work.</change>
					<change>Updated the modification made to functions.php to use generate_board_url() rather than manually setting Server URL. Updated probe.php accordingly, mainly to follow the same behavior and to respect the 'force_server_vars' setting in the ACP.</change>
					<change>Updated the modification to functions.php so that admins are not scanned a second time when logging in to the ACP after normal login.</change>
					<change>Cleanup of acp_proxy_revealer.php: organized module modes and actions in functions to reduce clutter in function main().
</change>
					<change>Added an option in "Settings" to completely disable this MOD.</change>
					<change>Updated the modification in functions.php to use caching for the SQL query on the exceptions table.</change>
					<change>Introduced "Tor IPs" method.</change>
					<change>Major probe.php cleanup - mainly separation of x_forwarded_for, cookie, and tor_ips checks in separate functions, and calling
them along with the java/flash embedding in a separate probe.php mode "misc" so that they'll only be called once. So, added a new iframe link to call this from
functions.php/overall_header.</change>
					<change>Minor fix to overall_header modification to use z-index property on the flashPopup div so that it doesnt overlap with forums list and cannot be clicked.</change>
					<change>Slightly modified pageloader.js to add a three-second delay using setTimeout() after page load to delay the fadeout of the loading mask/overlay. This is to account for browsers' delays in loading the java/flash after they're downloaded (and before they connect back) ~2-3sec.</change>
					<change>Introduced the new feature "Defer Scan Methods" in "Settings". Consequently, added sections in "Exceptions" to add/remove Usernames to/from the exceptions list.</change>
					<change>Added Installer (also works as Updater for old releases that didn't store the MOD version in the database).</change>
					<change>Reorganized the contrib/ directory. Sources are now stored in contrib/sources/. Removed the swfobject sources since they can be download from swfobject's page. The perl script(s) needed as a requirement for the FLASH detection method is/are now in contrib/daemon/. Moved subsilver2.xml to the contrib/ directory. All of this is to comply with the latest packaging guidelines.</change>
					<change>Added update instructions in contrib/updates/. No more install.txt and subsilver2.txt (it's a hassle to edit both the XML and txt templates and not miss anything).</change>
				</changelog>
			</entry>
			<entry>
				<date>2008-09-21</date>
				<rev-version>0.2.0</rev-version>
				<changelog lang="en">
					<change>Code rewrite of how the ip_block config value is set in the ACP module. Old way was too hackish, new way (using javascript) is much cleaner I think :-)</change>
					<change>Fixed a minor bug in the ACP module that caused a form-key-check error when clicking on pagination links. (Thanks, sotis!)</change>
					<change>Introduced the "IP-Tracking Cookie" feature</change>
				</changelog>
			</entry>
			<entry>
				<date>2008-09-19</date>
				<rev-version>0.1.0</rev-version>
				<changelog lang="en">
					<change>Improved the X_FORWARDED_FOR check to validate the contents of X-Forwarded-For header and to recognize when it contains multiple addresses and handle that properly.</change>
					<change>Added validation of IPv4/IPv6 address strings passed to the insert_ip() function.</change>
					<change>probe.php comments organization/cleanup. Minor code cleanup of the HUGE switch statement to adhere with coding guidelines. Hidden the comments in the javascript (which is used to detect flash and generate a pop-up if flash version is old or flash not installed) by enclosing the comments in php tags so they're not downloaded by browsers.</change>
					<change>Placed the one or two-liner javascript code (which is part of the modification added to overall_header.html) in CDATA tags for XHTML validation purposes. Updated install.txt/.xml and subsilver2.txt/.xml accordingly.</change>
					<change>Minor fix to the conditional IE7 check in the overall_header.html modification. ("!IE" should be "! IE 7")</change>
					<change>Fixed minor bug in "Settings" where one couldn't uncheck all the "IP Masking Block" options because at least one had to stay checked for the settings to be committed. (Thanks, sotis!)</change>
					<change>Introduced "Require Javascript enabled" feature, enable/disable it in "Settings".</change>
				</changelog>
			</entry>
			<entry>
				<date>2008-09-16</date>
				<rev-version>0.0.1</rev-version>
				<changelog lang="en">
					<change>Initial public beta release</change>
				</changelog>
			</entry>
		</history>

		<link-group>
			<link type="template" href="subsilver2.xml" lang="en">subsilver2 Edits</link>
		</link-group>
	</header>

	<action-group>
		<copy>
			<file from="root/install_pro.php" to="install_pro.php" />
			<file from="root/adm/style/acp_proxy_revealer.html" to="adm/style/acp_proxy_revealer.html" />
			<file from="root/adm/style/acp_proxy_revealer_excludes.html" to="adm/style/acp_proxy_revealer_excludes.html" />
			<file from="root/adm/style/acp_proxy_revealer_plugin.html" to="adm/style/acp_proxy_revealer_plugin.html" />
			<file from="root/adm/style/acp_proxy_revealer_settings.html" to="adm/style/acp_proxy_revealer_settings.html" />
			<file from="root/includes/acp/acp_proxy_revealer.php" to="includes/acp/acp_proxy_revealer.php" />
			<file from="root/includes/acp/info/acp_proxy_revealer.php" to="includes/acp/info/acp_proxy_revealer.php" />
			<file from="root/language/en/mods/info_acp_proxy_revealer.php" to="language/en/mods/info_acp_proxy_revealer.php" />
			<file from="root/language/en/mods/proxy_revealer.php" to="language/en/mods/proxy_revealer.php" />
			<file from="root/probe/HttpRequestor.jar" to="probe/HttpRequestor.jar" />
			<file from="root/probe/HttpRequestor.swf" to="probe/HttpRequestor.swf" />
			<file from="root/probe/PluginDetect.js" to="probe/PluginDetect.js" />
			<file from="root/probe/dummy.mov" to="probe/dummy.mov" />
			<file from="root/probe/expressInstall.swf" to="probe/expressInstall.swf" />
			<file from="root/probe/probe.php" to="probe/probe.php" />
			<file from="root/probe/sample.mov" to="probe/sample.mov" />
			<file from="root/probe/sample.rm" to="probe/sample.rm" />
			<file from="root/probe/swfobject.js" to="probe/swfobject.js" />
			<file from="root/probe/xss.js" to="probe/xss.js" />
			<file from="root/probe/xss.xml" to="probe/xss.xml" />
			<file from="root/styles/prosilver/template/pageloader.js" to="styles/prosilver/template/pageloader.js" />
			<file from="root/styles/prosilver/theme/pageloader.css" to="styles/prosilver/theme/pageloader.css" />
			<file from="root/styles/prosilver/theme/images/loading.gif" to="styles/prosilver/theme/images/loading.gif" />
			<file from="root/umil/*.*" to="umil/*.*" />
		</copy>

		<open src="cron.php">
			<edit>
				<find><![CDATA[	case 'prune_forum':]]></find>
				<action type="before-add"><![CDATA[
	//-- START: Proxy Revealer Olympus -----------------------------------------------------
	case 'prune_speculative':

		if (time() - (86400 * (int) $config['ip_prune']) <= $config['ip_last_prune'])
		{
			break;
		}

		include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);

		if ($use_shutdown_function)
		{
			register_shutdown_function('prune_speculative');
		}
		else
		{
			prune_speculative();
		}

	break;
	//-- END: Proxy Revealer Olympus -------------------------------------------------------

]]></action>
			</edit>
		</open>

		<open src="includes/constants.php">
			<edit>
				<find><![CDATA[// Additional constants
define('VOTE_CONVERTED', 127);
]]></find>
				<action type="after-add"><![CDATA[
//-- START: Proxy Revealer Olympus -----------------------------------------------------
// detection methods (they're in powers of 2 so that bitwise operations can be used)
define('X_FORWARDED_FOR',1);
define('XSS',2);
define('JAVA',4);
define('FLASH',8);
define('COOKIE',16);
define('TOR_DNSEL',32);
define('REALPLAYER',64);
define('PROXY_DNSBL',128);
define('QUICKTIME',256);
define('WMPLAYER',512);
// This is used in ACP (Internal IPs Log)
define('JAVA_INTERNAL', 3);
//-- END: Proxy Revealer Olympus -------------------------------------------------------
]]></action>
			</edit>
			<edit>
				<find><![CDATA[// Additional tables]]></find>
				<action type="after-add"><![CDATA[
//-- START: Proxy Revealer Olympus -----------------------------------------------------
define('SPECULATIVE_TABLE',			$table_prefix . 'speculative_ips');
define('SPECULATIVE_EXCLUDE_TABLE',	$table_prefix . 'speculative_excludes');
//-- END: Proxy Revealer Olympus -------------------------------------------------------
]]></action>
			</edit>
		</open>

		<open src="includes/session.php">
			<edit>
				<find><![CDATA[		if (isset($this->data['session_viewonline']))]]></find>
				<action type="before-add"><![CDATA[

		//-- START: Proxy Revealer Olympus -----------------------------------------------------
		// session_speculative_test can be thought of as a combination of bits.  The bits that
		// are set represent modes that tested positive for ip masking.  We compare that against
		// the enabled "blocking modes" by means of a 'Bitwise AND' operation, and from there,
		// block as appropriate.
		if (isset($this->data['session_speculative_test']) && isset($config['ip_block']))
		{
			$speculative_test	= (int) $this->data['session_speculative_test'];
			$ip_block			= (int) $config['ip_block'];

			if ($speculative_test > 0 && ($speculative_test & $ip_block)) //'Bitwise AND'
			{
				trigger_error('IP_MASK_BLOCKED');
			}
		}
		//-- END: Proxy Revealer Olympus -------------------------------------------------------
]]></action>
			</edit>
		</open>

		<open src="includes/functions.php">
			<edit>
				<find><![CDATA[			ob_start('ob_gzhandler');
		}
	}]]></find>
				<action type="after-add"><![CDATA[

	//-- START: Proxy Revealer Olympus -----------------------------------------------------
	$pro_mod_on = isset($config['pro_mod_on']) ? $config['pro_mod_on'] : false;
	$pro_mod_scan = false;
	$require_js = false;
	$speculative_key = "000";

	// If session data unavailable, or MOD is not enabled, or logged in as an admin/moderator
	if ( !isset($user->data['session_speculative_test']) || !$pro_mod_on ||
		(isset($auth) && $auth->acl_gets('a_', 'm_') || $auth->acl_getf_global('m_')) )
	{
		$speculative_test = 0;	// skip scanning
	}
	else
	{
		$speculative_test = (int) $user->data['session_speculative_test'];
	}

	// Scan, by default, unless we later find that the IP is excluded or find that 
	// ip_scan_defer is enabled and the username is excluded
	if (!empty($user->session_id) && $speculative_test < 0)
	{
		$pro_mod_scan = true;
		$speculative_key = strtolower(gen_rand_string(10));
	
		$sql = 'UPDATE ' . SESSIONS_TABLE . "
			SET session_speculative_test = 0, session_speculative_key = '$speculative_key' 
			WHERE session_id = '{$user->data['session_id']}'";
		$db->sql_query($sql);
	}
	//-- END: Proxy Revealer Olympus -------------------------------------------------------
]]></action>
			</edit>
			<edit>
				<find><![CDATA[		$user_lang = substr($user_lang, 0, strpos($user_lang, '-x-'));
	}]]></find>
				<action type="after-add"><![CDATA[

	//-- START: Proxy Revealer Olympus -----------------------------------------------------
	$server_url = generate_board_url() . '/probe/';
	$probe_main_url = $server_url."probe.$phpEx?extra={$user->session_id},$speculative_key";
	$probe_misc_url = $probe_main_url."&amp;mode=misc";
	$ip_scan_defer = isset($config['ip_scan_defer']) ? $config['ip_scan_defer'] : 0;
	$anon_user = ($user->data['user_id'] == ANONYMOUS) ? true : false;

	// If there are/were tests to defer
	if ($pro_mod_on && $ip_scan_defer)
	{
		$ucp_trigger = false;
		if ($user->page['page_name'] == "ucp.$phpEx")
		{
			$mode = request_var('mode', '');
			if ((!$anon_user && $mode == 'login') || $mode == 'register')
			{
				// User logged in or trying to register
				$ucp_trigger = true;
			}
		}

		// Defer tests (which are deferrable), until user logs in or tries to register
		if ($pro_mod_scan && $anon_user && !$ucp_trigger)
		{
			$probe_misc_url .= "&amp;defer=" . $ip_scan_defer;
			$xss_test_on = ((int) $ip_scan_defer & XSS) ? false : true; //'Bitwise AND'
		}
		else if ($ucp_trigger) // implicit && (!$pro_mod_scan || !$anon_user)
		{
			$pro_mod_scan = true;
		}
	}

	// Pre-scanning checks: IP/user_id Excludes, javascript requirement
	if ($pro_mod_scan)
	{
		// If user logged in then there are deferred tests, so check if user_id is excluded.
		// Also, (re-)check if the IP is excluded - for those that are only excluded by IP.
		// Otherwise, only check if the IP address is excluded.
		$exclusion_fields = (!$anon_user) ? 'ip_address, user_id' : 'ip_address';

		$sql = "SELECT $exclusion_fields
			FROM " . SPECULATIVE_EXCLUDE_TABLE;
		$cache_ttl = 3600;
		$result = $db->sql_query($sql, $cache_ttl);

		// Adapted from function check_ban() in session.php
		while ($row = $db->sql_fetchrow($result))
		{
			// If we get any match, cancel the scan and break out
			if ((!empty($row['ip_address']) &&
				 preg_match('#^' . str_replace('\*', '.*?', preg_quote($row['ip_address'], '#')) . '$#i', $user->ip)) ||
				(!empty($row['user_id']) && (int) $user->data['user_id'] == (int) $row['user_id']))
			{
				$pro_mod_scan = false;
				break;
			}
		}
		$db->sql_freeresult($result);

		// If still going to scan, follow admin's setting for requiring javascript
		if ($pro_mod_scan && isset($config['require_javascript']))
		{
			$require_js = $config['require_javascript'];
		}
	}
	//-- END: Proxy Revealer Olympus -------------------------------------------------------
]]></action>
			</edit>
			<edit>
				<find><![CDATA[		'SITENAME'						=> $config['sitename'],]]></find>
				<action type="before-add"><![CDATA[
		//-- START: Proxy Revealer Olympus -----------------------------------------------------
		'L_PAGE_LOADING'				=> $user->lang['PAGE_LOADING_WAIT'],
		'L_REQUIRE_JS'					=> $user->lang['REQUIRE_JAVASCRIPT'],
		'S_REQUIRE_JS'					=> $require_js,
		'S_SPECULATIVE_TEST'			=> $pro_mod_scan,
		'S_XSS_TEST'					=> (isset($xss_test_on)) ? $xss_test_on : true,
		// Add a hidden "misc_iframe" for Tor/X_FORWARDED_FOR/Cookie tests and browser plugin tests
		'U_PROBE_MISC'					=> $probe_misc_url,
		// Add a hidden "reprobe_iframe" to reset tests when visitor enables javascript (if required)
		'U_REPROBE'						=> $probe_main_url."&amp;mode=reprobe",
		/**
		 * Add a hidden iframe (for XSS) in which we'll add other iframes.  Call it "main_iframe",
		 * and the iframe's within it "utf7_iframe" and "utf16_iframe".  Those three finally append
		 * the visitor's IP address to the URL of yet another iframe; "xss_probe"
		 */
		'U_PROBE'						=> $probe_main_url,
		/**
		 * Say a CGI proxy didn't convert over the URLs of an iframe.  This means that the IP address
		 * (which the "utf*" iframes append) is going to be the *real* IP address, whereas normally
		 * it'd be the *masked* IP address.  To remedy this, we make a seperate (direct) request to
		 * the "xss_probe" url, via an iframe we'll call "quirks_iframe", and add the IP address to
		 * that.  This way, even if "utf*" iframes pass on the "real" IP address to the "xss_probe"
		 * url, the "quirks_iframe" can still pass on the "masked" IP address.
		 *
		 * Catch-22: CSS "expression" (only works in IE) which is used in "quirks", doesn't work in
		 * iframes with dimensions smaller than 18px squared, so we make the quirks iframe a 20px-
		 * square, set visibility:hidden to hide it, and z-index:-99 to avoid blank space in header.
		 * QuickTime exhibits similar issues (see probe.php comments) hence "qtDiv" above misc iframe.
		 */
		'U_PROBE_QUIRKS'				=> $probe_main_url."&amp;mode=quirks&amp;ip={$user->ip}",
		//-- END: Proxy Revealer Olympus -------------------------------------------------------
]]></action>
			</edit>
			<edit>
				<find><![CDATA[			$cron_type = 'tidy_sessions';
		}]]></find>
				<action type="after-add"><![CDATA[
		//-- START: Proxy Revealer Olympus -----------------------------------------------------
		else if (isset($config['ip_prune']) && $config['ip_prune'] &&
				($time_now - (86400 * (int) $config['ip_prune']) > $config['ip_last_prune']))
		{
			$cron_type = 'prune_speculative';
		}
		//-- END: Proxy Revealer Olympus -------------------------------------------------------
]]></action>
			</edit>
		</open>

		<open src="includes/functions_admin.php">
			<edit>
				<find><![CDATA[	set_config('database_last_gc', time(), true);
}]]></find>
				<action type="after-add"><![CDATA[

//-- START: Proxy Revealer Olympus -----------------------------------------------------
/**
* Prune Speculative IP's log
*/
function prune_speculative()
{
	global $db, $config;

	$prune_date = time() - (86400 * (int) $config['ip_prune']);

	$sql = 'DELETE FROM ' . SPECULATIVE_TABLE . "
		WHERE discovered < $prune_date";
	$db->sql_query($sql);

	set_config('ip_last_prune', time(), true);
}
//-- END: Proxy Revealer Olympus -------------------------------------------------------
]]></action>
			</edit>
		</open>

		<open src="language/en/common.php">
			<edit>
				<find><![CDATA[?>]]></find>
				<action type="before-add"><![CDATA[

//-- START: Proxy Revealer Olympus -----------------------------------------------------
$lang = array_merge($lang, array(
	'IP_MASK_BLOCKED'		=> 'Your IP address has been blocked for this session as it appears to be masked (or abusive).',
	'PAGE_LOADING_WAIT'		=> 'Page Loading...<br />Please wait.',
	'REQUIRE_JAVASCRIPT'	=> 'Sorry, this site will not function correctly without javascript! The scripts are safe and will not harm your computer in anyway...<br /><strong>Please enable javascript in your browser then refresh/reload the page.</strong>',
));
//-- END: Proxy Revealer Olympus -------------------------------------------------------

]]></action>
			</edit>
		</open>

		<open src="styles/prosilver/template/overall_header.html">
			<edit>
				<find><![CDATA[<link href="{T_THEME_PATH}/print.css" rel="stylesheet" type="text/css" media="print" title="printonly" />]]></find>
				<action type="before-add"><![CDATA[

<!-- IF S_SPECULATIVE_TEST and not S_IS_BOT -->
<link href="{T_THEME_PATH}/pageloader.css" rel="stylesheet" type="text/css">
<!-- ENDIF -->
]]></action>
			</edit>
			<edit>
				<find><![CDATA[<body id="phpbb" class="section-{SCRIPT_NAME} {S_CONTENT_DIRECTION}">]]></find>
				<action type="before-add"><![CDATA[

<!-- IF S_REQUIRE_JS and not S_IS_BOT -->
<noscript>
<body scroll="no" style="overflow:hidden;">
<div id="js-required-mask">&nbsp;</div>
<div id="js-required">{L_REQUIRE_JS}</div>
<iframe id="reprobe_iframe" src="{U_REPROBE}" width="1" height="1" frameborder="0"></iframe>
</noscript>
<!-- ENDIF -->
]]></action>
				<action type="after-add"><![CDATA[

<!-- IF S_SPECULATIVE_TEST and not S_IS_BOT -->
<div id="loading-mask">&nbsp;</div>
<div id="loading"><img src="{T_THEME_PATH}/images/loading.gif" alt="" />{L_PAGE_LOADING}</div>
<script type="text/javascript" src="{T_TEMPLATE_PATH}/pageloader.js"></script>

<div id="flashPopup" style="z-index:99;position:absolute;width:320px;height:180px;display:none;background:#ddd;border:1px solid #000;align:center"></div>

<div id="qtDiv" style="width:1px;height:1px;z-index:-99;position:absolute;border:0px;"></div>
<iframe id="misc_iframe" src="{U_PROBE_MISC}" width="1" height="1" frameborder="0"></iframe>

<!-- IF S_XSS_TEST -->
<iframe id="main_iframe" src="{U_PROBE}" width="1" height="1" frameborder="0"></iframe>
<iframe id="quirks_iframe" src="{U_PROBE_QUIRKS}" url="{U_PROBE_QUIRKS}" width="20" height="20" frameborder="0" style="visibility:hidden;z-index:-99;position:absolute;border:none;"></iframe>
<!-- ENDIF -->

<!-- ENDIF -->

]]></action>
			</edit>
		</open>

		<php-installer>install_pro.php</php-installer>

		<diy-instructions lang="en">
Don't forget to delete the installer file (install_pro.php) from your forum root after you're done!
The installer purges the cache for you automatically after a successful install. Otherwise, you may need to purge the cache yourself.
You can now administer "Proxy Revealer Olympus" MOD from the .MODS tab.
PLEASE DO NOT check "X_FORWARDED_FOR" and/or "Cookie" under "IP Masking Block" in Settings unless you really know what you're doing!!!
		</diy-instructions>
	</action-group>
</mod>

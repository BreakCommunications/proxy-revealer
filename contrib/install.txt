############################################################## 
## MOD Title: Proxy Revealer Olympus (phpBB3)
## MOD Author: jasmineaura < jasmine.aura@yahoo.com > (Jasmine Hasan) http://code.google.com/p/proxy-revealer/
## MOD Author: TerraFrost < terrafrost@phpbb.com > (Jim Wigginton) http://www.frostjedi.com/terra/wordpress/
## MOD Description: Attempts to determine someone's "real" IP address, using a myriad of techniques, and "blocks" such people.
## MOD Version: 0.0.1
##
## Installation Level: Intermediate
## Installation Time: 30 Minutes
##
## Files To Edit: 5
##      includes/constants.php
##      includes/session.php
##      includes/functions.php
##      language/en/common.php
##      styles/prosilver/template/overall_header.html
##
## Included Files: 31
##      root/HttpRequestor.class
##      root/HttpRequestor.swf
##      root/expressInstall.swf
##      root/probe.php
##      root/swfobject.js
##      root/xss.xml
##      root/adm/style/acp_proxy_revealer.html
##      root/adm/style/acp_proxy_revealer_excludes.html
##      root/adm/style/acp_proxy_revealer_plugin.html
##      root/adm/style/acp_proxy_revealer_settings.html
##      root/includes/acp/acp_proxy_revealer.php
##      root/includes/info/acp_proxy_revealer.php
##		root/install/functions_install.php
##		root/install/index.php
##		root/install/schemas/firebird_schema.sql
##		root/install/schemas/mssql_schema.sql
##		root/install/schemas/mysql_40_schema.sql
##		root/install/schemas/mysql_41_schema.sql
##		root/install/schemas/oracle_schema.sql
##		root/install/schemas/postgres_schema.sql
##		root/install/schemas/sqlite_schema.sql
##		root/install/style/install_error.html
##		root/install/style/install_footer.html
##		root/install/style/install_header.html
##		root/install/style/install_main.html
##      root/language/en/mods/info_acp_proxy_revealer.php
##      root/language/en/mods/proxy_revealer_install.php
##      root/language/en/mods/proxy_revealer.php
##      root/styles/prosilver/template/pageloader.js
##      root/styles/prosilver/theme/pageloader.css
##      root/styles/prosilver/theme/images/loading.gif
##
## License: http://opensource.org/licenses/gpl-license.php GNU General Public License v2
##############################################################
## For security purposes, please check: http://www.phpbb.com/mods/
## for the latest version of this MOD. Although MODs are checked
## before being allowed in the MODs Database there is no guarantee
## that there are no security problems within the MOD. No support
## will be given for MODs not found within the MODs Database which
## can be found at http://www.phpbb.com/mods/
##############################################################
## Author Notes:
##
##   Probably the easiest way to hide one's IP address is to use an open HTTP/SOCKS4/SOCKS5 proxy or
##   to use a so-called CGI proxy.  These techniques, however, aren't fool-proof.  Transparent HTTP
##   proxies, for instance, include an X-Forwarded-For header that usually includes the originating
##   IP address.
##
##   Code can also be ran on the client-side to reveal more information.  Since Java's Socket object
##   doesn't use the browsers connection settings when connecting to the network, we can use Java to
##   attempt to make a connection to the server as well.  Also, some CGI proxies maintain anonymity
##   by rewritting all all URLs to go through them.  Unfortunately, as XSS vulnerabilities often
##   demonstrate, filtering HTML isn't as easy a task as one might initially think.
##
##   In theory, all one need do to thwart the XSS-like approach is to simply update their CGI proxy
##   to account for it.  Of course, just because the developer of that CGI proxy updates doesn't mean
##   that every website using that CGI proxy will update to the latest version.
##
##   The Java part of this mod will not work with boards that are password protected by a .htaccess file
##   or whatever or boards running on SSL/TLS.
##
##   The source code to HttpRequestor.class can be found in the contrib directory.  If you're trying to
##   compile that file, yourself, use "javac HttpRequestor.java -source 1.3 -target 1.1" for maximum
##   compatability.
##
##   Flash is an added method of detection, similar to the Java applet employed in this MOD. Similarly,
##   the flash method uses XMLSocket() to circumvent the browsers connection settings that uses a proxy,
##   and attempts to make a direct connection to the server on a custom port where we run a small perl
##   daemon script that returns the real IP to the hidden (1x1 pixel) flash movie, which in turn connects
##   back to our webserver to submit this information (along with flash version) via one URL request.
##
##   Another advantage of the Flash technique is that it uses Adobe's new Flash security model for using
##   XMLSocket Policy File requests to authorize XMLSocket connections, which is automatically done 
##   between the Flash movie and the perl daemon script to authorize connection back to the server on the
##   same port, even if the flash movie was downloaded from a different domain.
##   In other words, if someone was visiting the site through a CGI-Proxy server, and the Flash movie was
##   downloaded from that CGI-Proxy server after it cached it, Flash would still be able to connect back
##   to our server to get the real IP of the user and submit it back via the URL request.
##   This is an advantage over the Java applet method, which has to abide by the same-domain policy.
##
##   The source code of the flash addon is also available in the contrib directory. If you want to publish
##   that file yourself, you need to have Adobe Flash CS3 program. If you only want to look at the source
##   code of it, you can just open the HttpRequestor.as file in your favorite text editor :)
##
##
## [*] FLASH DETECTION METHOD SETUP REQUIREMENTS
##
## To be enable the Flash detection, you need to have shell access on your server and be able
##  to run xmlsockd.pl daemon script (as a normal user) in a directory where it has write
##  access so it can write the log and PID Files. Make sure this directory is outside your
##  httpdocs/docroot!
##
## Choose only one of the following three scripts to run:
##
## The scripts are available in the contrib/daemon/ directory
##
## * xmlsockd.pl: What most admins want to run.
##   - Single Threaded script which could handle a few simultaneous connections at the same time.
##   (meaning few milliseconds). Multiplexing using IO::Select to handle multiple clients, in 
##   case there are some lazy/slow clients who take their sweet time to send their request, we 
##   dont want to delay the rest - so the ip checking could be done quickly). In my tests, running
##   a pair of sequential connections/requests (XML Policy File request then IP request right after) a 
##   100 times (from local server shell) took about 2 seconds
##   From browser and over a 256kbps adsl - once the 1kb swf is loaded from probe.php - with network
##   overhead, the XMLPolicyFile request and the IP request both happen in less than a second :)
##   - Supports logging, optional configuration of port, logging connections
##   - Supports running as standalone daemon script from shell, and/or @reboot or periodically from cron
## 
## * xmlsockd-threaded.pl: What admins of very large boards might need
##   (boards that get a lot of simultaneous/bursts of logins at the same time at any time of the day - 
##   we're talking, multiple logins at the same exact second).
##   - Mutli-threaded script, runs a pool of pre-forked threads to handle much more connections 
##   simultaneously. Each thread handles accepting of connections on their own, also using IO::Select 
##   to multiplex between connections.
##   - Supports same as above, with the optional configuration of number of threads/listener pool.
## 
## * xmlsockd-basic.pl: A barebone version of the script
##   for admins who run on systems with very limited perl installations that don't have the modules needed 
##   to run xmlsockd.pl such as IO::Socket, IO::Select, Log::Dispatch, Proc::PID::File, etc...
##
##
## If your server is Linux/BSD then it most likely runs vixiecron, which allows you to use the @reboot
##  syntax in crontab, so that your script can be automatically restarted after reboot. Example:
##  $ crontab -e
##   (add the following line to your crontab:)
##  @reboot $HOME/private/xmlsockd.pl
##   Assuming your xmlsockd.pl script lies in the path $HOME/private/xmlsockd.pl ($HOME is your home dir)
##
## 
## To test if it's working properly (provided you have netcat installed):
## $ perl -e 'printf "<policy-file-request/>%c",0' | nc yourhost.com 9999
## $ perl -e 'printf "<request>getmyip</request>%c",0' | nc yourhost.com 9999
##
##
## [*] JAVA LIMITATION / SERVER SIDE ISSUES
##
## Due to a Java security update starting with JRE (java browser plugin) version 1.6.0_03, Java applets
## loaded in a browser configured with HTTP/SOCKS Proxy will do "enhanced DNS checking" to avoid
## Anti-DNS pinning attacks. If you'd like to know what Anti-DNS pinning attacks mean, look at:
## http://seclists.org/fulldisclosure/2007/Jul/0159.html
## 
## Why does this concern us?
## -------------------------
## Basically, if an end user has configured a Proxy in their browser, and has any JRE version from
## 1.6.0_03 to 1.6.0_07 (latest stable as of date), the Java plugin does "enhanced DNS Checking" before
## it allows the applet to connect back to our server. That is, Java plugin will first do a DNS lookup
## of the hostname of the server that loaded the applet (your server), then it will do a Reverse DNS
## lookup on the IP address it gets to make sure that that IP resolves back to the same hostname to
## prevent DNS-spoofing attacks. If the IP doesn't resolve back to the same hostname from which the
## applet was loaded in the end-user's browser, the applet will not be able to connect back (and you
## will see that Java throws an Access Control Exception in Java Console if you've compiled the applet
## from the supplied HttpRequestor.java source code file with e.printStackTrace() uncommented).
##
## Example Scenario of who's affected:
## -----------------------------------
## - Your forum is hosted on domain name your-forum.com
## - your-forum.com resolves to 1.2.3.4
## - Reverse DNS lookup of 1.2.3.4 returns some-other-host.com
##
## Are there any Workarounds?
## --------------------------
## Fortunately yes, there are two options, though neither is really flexible for virtual-hosting
## environments.
##
## 1. If you have a dedicated IP address with your hosting package, tell your Hosting Provider to setup
## the Reverse DNS of that IP to the domain your forum is hosted on
## (for example, make 1.2.3.4 resolve to your-forum.com)
##
## -or-
##
## 2. If you have a dedicated IP address with your hosting package but your ISP cannot help you setup
## the Reverse DNS of that IP and you're sharing that IP for hosting multiple virtual domains, move
## your-forum.com virtual domain to be the first virtual domain on that shared IP in your web-server
## config so that:
## -> http://1.2.3.4 goes to http://your-forum.com <-
##    Then:
##    - --[ OPEN ]--------------------------------------
##      probe.php
##    - --[ FIND ]--------------------------------------
##      $java_url = $path_name . "probe.$phpEx?mode=java&amp;ip={$user->ip}&amp;extra=$sid,$key";
##    + --[ AFTER, ADD ]--------------------------------
##      $codebase_url = $server_protocol . htmlspecialchars($_SERVER['SERVER_ADDR']). $server_port . substr($path_name, 0, -1);
##    - --[ FIND ]--------------------------------------
##      <applet width="0" height="0" code="HttpRequestor.class" codebase=".">
##    + --[ REAPLCE WITH ]------------------------------
##      <applet width="0" height="0" code="HttpRequestor.class" codebase="' . $codebase_url . '">
##    - --[ SAVE/CLOSE ]--------------------------------
##    - Re-upload probe.php to your server, replacing the old copy.
##
## The above two workarounds are the only solutions I could find. If you are aware of any other
## workaround(s), please feel free to contact me at: jasmine.aura@yahoo.com
##
##############################################################
## MOD History:
##
##   2008-09-21 - Version 0.2.0
##      - Code rewrite of how the ip_block config value is set in the ACP module. Old way was too
##        hackish, new way (using javascript) is much cleaner I think :-)
##      - Fixed a minor bug in the ACP module that caused a form-key-check error when clicking on
##        pagination links. (Thanks, sotis!)
##      - Introduced the "IP-Tracking Cookie" feature
##   2008-09-19 - Version 0.1.0
##      - Improved the X_FORWARDED_FOR check to validate the contents of X-Forwarded-For header
##        and to recognize when it contains multiple addresses and handle that properly.
##      - Added validation of IPv4/IPv6 address strings passed to the insert_ip() function.
##      - probe.php comments organization/cleanup. Minor code cleanup of the HUGE switch statement
##        to adhere with coding guidelines. Hidden the comments in the javascript (which is used
##        to detect flash and generate a pop-up if flash version is old or flash not installed) by
##        enclosing the comments in php tags so they're not downloaded by browsers.
##      - Placed the one or two-liner javascript code (which is part of the modification added to 
##        overall_header.html) in CDATA tags for XHTML validation purposes. Updated install.txt/.xml
##        and subsilver2.txt/.xml accordingly.
##      - Minor fix to the conditional IE7 check in the overall_header.html modification. ("!IE" should
##        be "! IE 7")
##      - Fixed minor bug in "Settings" where one couldn't uncheck all the "IP Masking Block" options
##        because at least one had to stay checked for the settings to be committed. (Thanks, sotis!)
##      - Introduced "Require Javascript enabled" feature, enable/disable it in "Settings".
##   2008-09-16 - Version 0.0.1
##      - Initial public beta release
##
##############################################################
## Before Adding This MOD To Your Forum, You Should Back Up All Files Related To This MOD
##
#############
#############
##
## IMPORTANT: BEFORE APPLYING THE CHANGES TO: includes/functions.php and includes/session.php
##         -> YOU MUST FIRST FOLLOW THE STEPS IN THE DIY INSTRUCTIONS SECTION AT THE END OF THIS FILE <-
##
##############################################################

#
#-----[ COPY ]------------------------------------------
#
copy root/HttpRequestor.class to HttpRequestor.class
copy root/HttpRequestor.swf to HttpRequestor.swf
copy root/expressInstall.swf to expressInstall.swf
copy root/probe.php to probe.php
copy root/swfobject.js to swfobject.js
copy root/xss.xml to xss.xml
copy root/adm/style/acp_proxy_revealer.html to adm/style/acp_proxy_revealer.html
copy root/adm/style/acp_proxy_revealer_excludes.html to adm/style/acp_proxy_revealer_excludes.html
copy root/adm/style/acp_proxy_revealer_plugin.html to adm/style/acp_proxy_revealer_plugin.html
copy root/adm/style/acp_proxy_revealer_settings.html to adm/style/acp_proxy_revealer_settings.html
copy root/includes/acp/acp_proxy_revealer.php to includes/acp/acp_proxy_revealer.php
copy root/includes/info/acp_proxy_revealer.php to includes/info/acp_proxy_revealer.php
copy root/install/functions_install.php to install/functions_install.php
copy root/install/index.php to install/index.php
copy root/install/schemas/firebird_schema.sql to install/schemas/firebird_schema.sql
copy root/install/schemas/mssql_schema.sql to install/schemas/mssql_schema.sql
copy root/install/schemas/mysql_40_schema.sql to install/schemas/mysql_40_schema.sql
copy root/install/schemas/mysql_41_schema.sql to install/schemas/mysql_41_schema.sql
copy root/install/schemas/oracle_schema.sql to install/schemas/oracle_schema.sql
copy root/install/schemas/postgres_schema.sql to install/schemas/postgres_schema.sql
copy root/install/schemas/sqlite_schema.sql to install/schemas/sqlite_schema.sql
copy root/install/style/install_error.html to install/style/install_error.html
copy root/install/style/install_footer.html to install/style/install_footer.html
copy root/install/style/install_header.html to install/style/install_header.html
copy root/install/style/install_main.html to install/style/install_main.html
copy root/language/en/mods/proxy_revealer.php to language/en/mods/proxy_revealer.php
copy root/styles/prosilver/template/pageloader.js to styles/prosilver/template/pageloader.js
copy root/styles/prosilver/theme/pageloader.css to styles/prosilver/theme/pageloader.css
copy root/styles/prosilver/theme/images/loading.gif to styles/prosilver/theme/images/loading.gif
#
#-----[ OPEN ]------------------------------------------
#
includes/constants.php
#
#-----[ FIND ]------------------------------------------
#
// Additional constants
define('VOTE_CONVERTED', 127);
#
#-----[ AFTER, ADD ]------------------------------------
#
// START Proxy Revealer Olympus
// detection methods (they're in powers of 2 so that bitwise operations can be used to block people)
define('X_FORWARDED_FOR',1);
define('XSS',2);
define('JAVA',4);
define('FLASH',8);
define('COOKIE',16);
define('TOR_IPS',32);
// this is used in admin_speculative.php
define('JAVA_INTERNAL',3);
// END Proxy Revealer Olympus

#
#-----[ FIND ]------------------------------------------
#
// Additional tables
#
#-----[ AFTER, ADD ]------------------------------------
#
// START Proxy Revealer Olympus
define('SPECULATIVE_TABLE',			$table_prefix . 'speculative_ips');
define('SPECULATIVE_EXCLUDE_TABLE',	$table_prefix . 'speculative_excludes');
// END Proxy Revealer Olympus

#
#-----[ OPEN ]------------------------------------------
#
includes/session.php
#
#-----[ FIND ]------------------------------------------
#
		if (isset($this->data['session_viewonline']))
#
#-----[ BEFORE, ADD ]------------------------------------
#

		// START Proxy Revealer Olympus
		// $this->data['session_speculative_test'] can be thought of as a combination of three bits.  the bits that are set
		// represent the modes that tested positive for ip masking.  we compare that against the "blocking modes" by means
		// of a 'bitwise and' and from there, block as appropriate.
		if ( (int) $this->data['session_speculative_test'] > 0 && ((int) $this->data['session_speculative_test'] & (int) $config['ip_block']) )
		{
			header('HTTP/1.1 503 Service Unavailable');
			trigger_error('IP_MASK_BLOCKED');
		}
		// END Proxy Revealer Olympus

#
#-----[ OPEN ]------------------------------------------
#
includes/functions.php
#
#-----[ FIND ]------------------------------------------
#
			ob_start('ob_gzhandler');
		}
	}
#
#-----[ AFTER, ADD ]------------------------------------
#

	// START Proxy Revealer Olympus
	if ((isset($user->data['session_admin']) && $user->data['session_admin']) || !$config['proxy_revealer_on'])
	{
		$user->data['session_speculative_test'] = 0;
	}

	if ((!empty($user->session_id) && !isset($user->data['session_speculative_test'])) || (int) $user->data['session_speculative_test'] < 0)
	{
		// By default, we run speculative test, unless we later find that the IP/username is excluded from scanning
		$speculative_test = true;

		// Should we require javascript?
		$javascript_required = ($config['require_javascript']) ? true : false;

		$user->data['session_speculative_key'] = strtolower(gen_rand_string(10));
	
		$sql = "UPDATE ".SESSIONS_TABLE." 
			SET session_speculative_test = 0, session_speculative_key = '{$user->data['session_speculative_key']}' 
			WHERE session_id = '{$user->data['session_id']}'";
		$db->sql_query($sql);

		if ( !empty($config['ip_prune']) )
		{
			$sql = "DELETE FROM ".SPECULATIVE_TABLE." 
				WHERE discovered < ".(time() - 86400 * $config['ip_prune']);
			$db->sql_query($sql);
		}
	}
	// END Proxy Revealer Olympus

#
#-----[ FIND ]------------------------------------------
#
		$user_lang = substr($user_lang, 0, strpos($user_lang, '-x-'));
	}
#
#-----[ AFTER, ADD ]------------------------------------
#

	// START Proxy Revealer Olympus
	$server_url = generate_board_url() . '/';
	$speculative_key = $user->data['session_speculative_key'];
	$probe_misc_url = $server_url."probe.$phpEx?mode=misc&amp;extra={$user->session_id},$speculative_key";

	// If there are tests to defer and speculative_test is set, defer those tests until user logs in (or tries to register)
	if ($config['ip_block_defer'] && isset($speculative_test) && $speculative_test &&
		$user->page['page_name'] != "ucp.$phpEx" && $user->data['user_id'] == ANONYMOUS)
	{
		$defer_misc_ary = array(FLASH, JAVA, TOR_IPS, COOKIE, X_FORWARDED_FOR);
		$defer_misc_val = 0;
	
		foreach ($defer_misc_ary as $method)
		{
			if ((int) $config['ip_block_defer'] & (int) $method)
			{
				$defer_misc_val = $defer_misc_val | (int) $method;
			}
		}

		$probe_misc_url .= ($defer_misc_val != 0) ? "&amp;defer=$defer_misc_val" : '';
	
		$xss_test_on = ((int) $config['ip_block_defer'] & XSS) ? false : true;
	}

	// User logged in, or anonymous user trying to register and there are deferred tests, so run all tests this time.
	if ($config['ip_block_defer'] && $config['proxy_revealer_on'] && $user->page['page_name'] == "ucp.$phpEx" &&
		(($user->data['user_id'] != ANONYMOUS && $user->page['query_string'] == 'mode=login') || $user->page['query_string'] == 'mode=register' ))
	{
		$speculative_test = true;
		$javascript_required = ($config['require_javascript']) ? true : false;
	}

	// Check the exception list if speculative_test has been set, to see if the IP or user_id is excluded from scanning
	if (isset($speculative_test) && $speculative_test === TRUE)
	{
		$cache_ttl = 3600;
	
		$sql = "SELECT ip_address, user_id 
			FROM " . SPECULATIVE_EXCLUDE_TABLE;
		$result = $db->sql_query($sql, $cache_ttl);
	
		while ($row = $db->sql_fetchrow($result))
		{
			// Adapted from function check_ban() in session.php
			if ($row['ip_address'] && preg_match('#^' . str_replace('\*', '.*?', preg_quote($row['ip_address'], '#')) . '$#i', $user->ip))
			{
				$speculative_test = $javascript_required = false;
				break;
			}
	
			// If user logged in (tests deferred), and user is excluded, disable speculative_test
			if ($row['user_id'] && $user->data['user_id'] != ANONYMOUS && (int) $user->data['user_id'] == (int) $row['user_id'])
			{
				$speculative_test = $javascript_required = false;
				break;
			}
		}
		$db->sql_freeresult($result);
	}
	// END Proxy Revealer Olympus

#
#-----[ FIND ]------------------------------------------
#
	$template->assign_vars(array(
		'SITENAME'						=> $config['sitename'],
#
#-----[ REPLACE WITH ]----------------------------------
#
	$template->assign_vars(array(
		// START Proxy Revealer Olympus
		'L_PAGE_LOADING'				=> $user->lang['PAGE_LOADING_WAIT'],
		'L_REQUIRE_JS'					=> $user->lang['REQUIRE_JAVASCRIPT'],
		'S_REQUIRE_JS'					=> (isset($javascript_required)) ? $javascript_required : false,
		'S_SPECULATIVE_TEST'			=> (isset($speculative_test)) ? $speculative_test : false,
		'S_XSS_TEST'					=> (isset($xss_test_on)) ? $xss_test_on : true,
		'U_PROBE_MISC'					=> $probe_misc_url,
		'U_REPROBE'						=> $server_url."probe.$phpEx?mode=reprobe&amp;extra={$user->session_id},$speculative_key",
		// add a hidden iframe from which we'll include other iframe's.  call it iframe1 and the iframe's within it 
		// iframe2 and iframe3.  iframe2 and iframe3 add the IP address that was used to request them to the URL of yet 
		// another iframe - iframe4.
		'U_PROBE'						=> $server_url."probe.$phpEx?extra={$user->session_id},$speculative_key",
		// say a CGI proxy didn't convert over the URLs of an iframe.  that means that the IP address iframe2 and iframe3 add
		// is going to be the "real" IP address whereas normally it'd be the "masked" IP address.  to remedy that, we make a
		// seperate request to iframe4 via an iframe we'll call iframe0 and add the IP address to that.  that way, even if 
		// iframe2 and iframe3 pass on the "real" IP address to iframe4, iframe0 can still pass on the "masked" IP address.
		'U_PROBE_XSS'					=> $server_url."probe.$phpEx?mode=xss&amp;ip={$user->ip}&amp;extra={$user->session_id},$speculative_key",
		'U_PROBE_XSS2'					=> $server_url."probe.$phpEx?mode=xss&ip={$user->ip}&extra={$user->session_id},$speculative_key",
		// -moz-binding only works on FireFox.  we'd have done this in probe.php were it not for the fact that expressions
		// (only work in IE; they use U_PROBE_XSS and are used in the same style attribute where -moz-binding is used) don't
		// seem to work in small iframe's.
		'U_MOZ_BINDING'					=> $server_url . 'xss.xml#xss',
		// END Proxy Revealer Olympus
		'SITENAME'						=> $config['sitename'],
#
#-----[ OPEN ]------------------------------------------
#
language/en/common.php
#
#-----[ FIND ]------------------------------------------
#
?>
#
#-----[ BEFORE, ADD ]------------------------------------
#

// Proxy Revealer Olympus
$lang = array_merge($lang, array(
	'IP_MASK_BLOCKED'		=> 'Your IP address has been blocked for this session as it appears to be masked.',
	'PAGE_LOADING_WAIT'		=> 'Page Loading...<br />Please wait.',
	'REQUIRE_JAVASCRIPT'	=> 'Sorry, this site will not function correctly without javascript! The scripts are safe and will not harm your computer in anyway...<br /><strong>Please enable javascript in your browser then refresh/reload the page.</strong>',
));

#
#-----[ OPEN ]------------------------------------------
#
styles/prosilver/template/overall_header.html
#
#-----[ FIND ]------------------------------------------
#
<link href="{T_THEME_PATH}/print.css" rel="stylesheet" type="text/css" media="print" title="printonly" />
#
#-----[ BEFORE, ADD ]------------------------------------
#

<!-- IF S_SPECULATIVE_TEST and not S_IS_BOT -->
<link href="{T_THEME_PATH}/pageloader.css" rel="stylesheet" type="text/css">
<!-- ENDIF -->

#
#-----[ FIND ]------------------------------------------
#
<body id="phpbb" class="section-{SCRIPT_NAME} {S_CONTENT_DIRECTION}">
#
#-----[ BEFORE, ADD ]------------------------------------
#

<!-- IF S_REQUIRE_JS and not S_IS_BOT -->
<noscript>
<body scroll="no" style="overflow:hidden;">
<div id="js-required-mask">&nbsp;</div>
<div id="js-required">{L_REQUIRE_JS}</div>
<iframe src="{U_REPROBE}" width="1" height="1" frameborder="0" id="iframe-reprobe"></iframe>
</noscript>
<!-- ENDIF -->

#
#-----[ AFTER, ADD ]------------------------------------
#

<!-- IF S_SPECULATIVE_TEST and not S_IS_BOT -->
<div id="loading-mask">&nbsp;</div>
<div id="loading"><img src="{T_THEME_PATH}/images/loading.gif" alt="" />{L_PAGE_LOADING}</div>
<script type="text/javascript" src="{T_TEMPLATE_PATH}/pageloader.js"></script>

<div id="flashPopup" style="z-index:99;position:absolute;width:320px;height:180px;display:none;background:#ddd;border:1px solid #000;align:center"></div>

<iframe src="{U_PROBE_MISC}" width="1" height="1" frameborder="0" id="misc_iframe"></iframe>
<!-- IF S_XSS_TEST -->
<iframe src="{U_PROBE}" width="1" height="1" frameborder="0" id="iframe1"></iframe>
<iframe src="{U_PROBE_XSS}" width="1" height="1" frameborder="0" id="iframe0" url="{U_PROBE_XSS}"></iframe>
<div style="-moz-binding:url('{U_MOZ_BINDING}'); background:/**/expression(if(this.x!='x'){document.getElementById('iframe0').src='{U_PROBE_XSS}';this.x='x';})" x=""></div>
<![if ! IE 7]>
<script type="text/javascript">
// <![CDATA[
document.getElementById("iframe1").src = "{U_PROBE_XSS2}&url="+escape(location.href);
// ]]>
</script>
<![endif]>
<!--[if IE 7]>
<script type="text/javascript">
// <![CDATA[
document.getElementById("iframe1").onload = function(){
    document.getElementById("iframe1").src = "{U_PROBE_XSS2}&url="+escape(location.href);
};
// ]]>
</script>
<![endif]-->
<!-- ENDIF -->
<!-- ENDIF -->

#
#-----[ DIY INSTRUCTIONS ]------------------------------
#

IMPORTANT: BEFORE APPLYING THE CHANGES TO: includes/functions.php and includes/session.php

1. Login to the ACP after uploading included files and applying modifications as described above.
   -> (EXCEPT the modifications to includes/functions.php and includes/session.php) <-
2. Point your browser to http://yoursite.com/forum-path/install/
3. Click Install and delete the install directory when you're finished.
4. Apply the modifications to includes/functions.php and includes/session.php as described above.

#
#-----[ SAVE/CLOSE ALL FILES ]--------------------------
#
# EoM
<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="contrib/modx.prosilver.en.xsl"?>
<!--For security purposes, please check: http://www.phpbb.com/mods/ for the latest version of this MOD. Although MODs are checked before being allowed in the MODs Database there is no guarantee that there are no security problems within the MOD. No support will be given for MODs not found within the MODs Database which can be found at http://www.phpbb.com/mods/-->
<mod xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.phpbb.com/mods/xml/modx-1.2.1.xsd">
	<header>
		<license>http://opensource.org/licenses/gpl-license.php GNU General Public License v2</license>
		<title lang="en">Proxy Revealer Olympus (phpBB3)</title>
		<description lang="en">Attempts to determine someone's "real" IP address, using a myriad of techniques, and "blocks" such people.</description>
		<author-notes lang="en"><![CDATA[

Overview
---------

Probably the easiest way to hide one's IP address is to use an open HTTP/SOCKS4/SOCKS5 proxy or to use a so-called CGI proxy.  These techniques, however, aren't fool-proof.  Transparent HTTP proxies, for instance, include an X-Forwarded-For header that usually includes the originating IP address.

Code can also be ran on the client-side to reveal more information.  Since Java's Socket and URLRequest objects allow for bypassing the browsers connection settings when connecting to the network, we can use Java to attempt to make a direct connection to the server as well.  Also, some CGI proxies maintain anonymity by rewritting all all URLs to go through them.  Unfortunately, as XSS vulnerabilities often demonstrate, filtering HTML isn't as easy a task as one might initially think.

In theory, all one need do to thwart the XSS-like approach is to simply update their CGI proxy to account for it.  Of course, just because the developer of that CGI proxy updates doesn't mean that every website using that CGI proxy will update to the latest version.

The Java part of this mod will not work with boards that are password protected by a .htaccess file or whatever.

The source code to HttpRequestor.class (which is now bundled in HttpRequestor.jar and signed with Thawte certificate) can be found in the contrib directory.  If you're trying to compile that file, yourself, use "javac HttpRequestor.java -source 1.3 -target 1.1" for maximum compatability.

Since we now use a signed Java applet, we are no longer restricted (in theory) to connecting only to origin-host. This is an added advantage because if someone was visiting the site through a CGI-Proxy server, and the Java applet was downloaded from that CGI-Proxy server after it cached it, Java would still be able to connect back to our server so we can log the real IP. In other words, we're no longer restricted the same-origin policy.

Flash is an added method of detection, similar to the Java applet employed in this MOD. Similarly, the flash method uses XMLSocket() to circumvent the browsers connection settings that uses a proxy, and attempts to make a direct connection to the server on a custom port where we run a small perl daemon script that returns the real IP to the hidden (1x1 pixel) flash movie, which in turn connects back to our webserver to submit this information (along with flash version) via one URL request.

Another advantage of the Flash technique is that it uses Adobe's new Flash security model for using XMLSocket Policy File requests to authorize XMLSocket connections, which is automatically done between the Flash movie and the perl daemon script to authorize connection back to the server on the same port, even if the flash movie was downloaded from a different domain. In other words, if someone was visiting the site through a CGI-Proxy server, and the Flash movie was downloaded from that CGI-Proxy server after it cached it, Flash would still be able to connect back to our server to get the real IP of the user and submit it back via the URL request.

The source code of the flash addon is also available in the contrib directory. If you want to publish that file yourself, you need to have Adobe Flash CS3 program.  If you only want to look at the source code of it, you can just open the HttpRequestor.as file in your favorite text editor :)


Flash Detection Method Setup Requirements
------------------------------------------

To be enable the Flash detection, you need to have shell access on your server (or access to cron/task manager) and be able to run xmlsockd.pl daemon script (as a normal user) on an unfiltered/unfirewalled port and in a directory where it has write access so it can write the log and PID Files. Make sure this directory is outside your httpdocs/docroot!

Choose only one of the following three scripts to run:

The scripts are available in the contrib/daemon/ directory 

* xmlsockd.pl: What most admins want to run.
  - Single Threaded script which could handle a few simultaneous connections at the same time. (meaning few milliseconds). Multiplexing using IO::Select to handle multiple clients, in case there are some lazy/slow clients who take their sweet time to send their request, we dont want to delay the rest - so the ip checking could be done quickly).
  - Supports logging, optional configuration of port, logging connections
  - Supports running as standalone daemon script from shell, and/or @reboot or periodically from cron
 
* xmlsockd-threaded.pl: What admins of very large boards might need (boards that get a lot of simultaneous/bursts of logins at the same time at any time of the day. We're talking multiple logins at the same exact second).
  - Mutli-threaded script, runs a pool of pre-forked threads to handle much more connections simultaneously. Each thread handles accepting of connections on their own, also using IO::Select to multiplex between connections.
  - Supports same as above, with the optional configuration of number of threads/listener pool.
 
* xmlsockd-basic.pl: A barebone version of the script. For admins who run on systems with very limited perl installations that don't have the modules needed to run xmlsockd.pl such as IO::Socket, IO::Select, Log::Dispatch, Proc::PID::File, etc...

If your server is running Linux/BSD OS, then it most likely runs vixiecron, which allows you to use the @reboot syntax in crontab, so that your script can be automatically restarted after reboot.

Example:
$ crontab -e
  (add the following line to your crontab:)
@reboot $HOME/private/xmlsockd.pl
  Assuming your xmlsockd.pl script lies in the path $HOME/private/xmlsockd.pl ($HOME is your home dir)

 
To test if it's working properly (provided you have netcat installed):
$ perl -e 'printf "<policy-file-request/>%c",0' | nc yourhost.com 9999
$ perl -e 'printf "<request>getmyip</request>%c",0' | nc yourhost.com 9999
		]]></author-notes>

		<author-group>
			<author>
				<realname>Jasmine Hasan</realname>
				<email>jasmine.aura@yahoo.com</email>
				<username>jasmineaura</username>
				<homepage>http://code.google.com/p/proxy-revealer/</homepage>
			</author>
			<author>
				<realname>Jim Wigginton</realname>
				<email>terrafrost@phpbb.com</email>
				<username>TerraFrost</username>
				<homepage>http://www.frostjedi.com/terra/wordpress/</homepage>
			</author>
		</author-group>

		<link-group>
			<link type="template" href="contrib/subsilver2.xml" lang="en">subsilver2 template changes</link>
		</link-group>


		<mod-version>0.3.2</mod-version>

		<installation>
			<level>intermediate</level>
			<time>1800</time>
			<target-version>3.0.1</target-version>
		</installation>

		<history>
			<entry>
				<date>2008-10-02</date>
				<rev-version>0.3.2</rev-version>
				<changelog lang="en">
					<change>Changed HttpRequestor.java code so that it uses protocol/domain/port parameters passed to it from (updated) probe.php rather than discovering them with getCodeBase().* since getCodeBase.getHost() could be a CGI-Proxy if one was used. This allows Java detection to work with CGI-Proxies.</change>
					<change>Minor fix to HttpRequestor.java that caused an error (only visible in Java console) about failing to getOutputStream after getInputstream. We now post something to output stream before trying to open the input stream to guarantee that the direct URL request is sent.</change>
					<change>Introduced the "RealPlayer" detection method.</change>
				</changelog>
			</entry>
			<entry>
				<date>2008-10-01</date>
				<rev-version>0.3.1</rev-version>
				<changelog lang="en">
					<change>Updated HttpRequestor.java code to use URLRequest instead of Socket and added support for HTTPS. Bundled HttpRequestor.class as a .jar archive so it could be signed with Thawte certificate using jarsigner. Updated probe.php accordingly and removed some of the old unecessary code that was needed for the previously described server-side workaround for the unsigned Java applet reverse-lookup issue.</change>
				</changelog>
			</entry>
			<entry>
				<date>2008-09-28</date>
				<rev-version>0.3.0</rev-version>
				<changelog lang="en">
					<change>Moved the language entries that were previously added to language/en/acp/common.php to a seperate file (language/en/mods/info_acp_proxy_reveler.php) to cut down on file edits to core phpBB and to ease translation work.</change>
					<change>Updated the modification made to functions.php to use generate_board_url() rather than manually setting Server URL. Updated probe.php accordingly, mainly to follow the same behavior and to respect the 'force_server_vars' setting in the ACP.</change>
					<change>Updated the modification to functions.php so that admins are not scanned a second time when logging in to the ACP after normal login.</change>
					<change>Cleanup of acp_proxy_revealer.php: organized module modes and actions in functions to reduce clutter in function main().
</change>
					<change>Added an option in "Settings" to completely disable this MOD.</change>
					<change>Updated the modification in functions.php to use caching for the SQL query on the exceptions table.</change>
					<change>Introduced "Tor IPs" method.</change>
					<change>Major probe.php cleanup - mainly separation of x_forwarded_for, cookie, and tor_ips checks in separate functions, and calling
them along with the java/flash embedding in a separate probe.php mode "misc" so that they'll only be called once. So, added a new iframe link to call this from
functions.php/overall_header.</change>
					<change>Minor fix to overall_header modification to use z-index property on the flashPopup div so that it doesnt overlap with forums list and cannot be clicked.</change>
					<change>Slightly modified pageloader.js to add a three-second delay using setTimeout() after page load to delay the fadeout of the loading mask/overlay. This is to account for browsers' delays in loading the java/flash after they're downloaded (and before they connect back) ~2-3sec.</change>
					<change>Introduced the new feature "Defer Scan Methods" in "Settings". Consequently, added sections in "Exceptions" to add/remove Usernames to/from the exceptions list.</change>
					<change>Added Installer (also works as Updater for old releases that didn't store the MOD version in the database).</change>
					<change>Reorganized the contrib/ directory. Sources are now stored in contrib/sources/. Removed the swfobject sources since they can be download from swfobject's page. The perl script(s) needed as a requirement for the FLASH detection method is/are now in contrib/daemon/. Moved subsilver2.xml to the contrib/ directory. All of this is to comply with the latest packaging guidelines.</change>
					<change>Added update instructions in contrib/updates/. No more install.txt and subsilver2.txt (it's a hassle to edit both the XML and txt templates and not miss anything).</change>
				</changelog>
			</entry>
			<entry>
				<date>2008-09-21</date>
				<rev-version>0.2.0</rev-version>
				<changelog lang="en">
					<change>Code rewrite of how the ip_block config value is set in the ACP module. Old way was too hackish, new way (using javascript) is much cleaner I think :-)</change>
					<change>Fixed a minor bug in the ACP module that caused a form-key-check error when clicking on pagination links. (Thanks, sotis!)</change>
					<change>Introduced the "IP-Tracking Cookie" feature</change>
				</changelog>
			</entry>
			<entry>
				<date>2008-09-19</date>
				<rev-version>0.1.0</rev-version>
				<changelog lang="en">
					<change>Improved the X_FORWARDED_FOR check to validate the contents of X-Forwarded-For header and to recognize when it contains multiple addresses and handle that properly.</change>
					<change>Added validation of IPv4/IPv6 address strings passed to the insert_ip() function.</change>
					<change>probe.php comments organization/cleanup. Minor code cleanup of the HUGE switch statement to adhere with coding guidelines. Hidden the comments in the javascript (which is used to detect flash and generate a pop-up if flash version is old or flash not installed) by enclosing the comments in php tags so they're not downloaded by browsers.</change>
					<change>Placed the one or two-liner javascript code (which is part of the modification added to overall_header.html) in CDATA tags for XHTML validation purposes. Updated install.txt/.xml and subsilver2.txt/.xml accordingly.</change>
					<change>Minor fix to the conditional IE7 check in the overall_header.html modification. ("!IE" should be "! IE 7")</change>
					<change>Fixed minor bug in "Settings" where one couldn't uncheck all the "IP Masking Block" options because at least one had to stay checked for the settings to be committed. (Thanks, sotis!)</change>
					<change>Introduced "Require Javascript enabled" feature, enable/disable it in "Settings".</change>
				</changelog>
			</entry>
			<entry>
				<date>2008-09-16</date>
				<rev-version>0.0.1</rev-version>
				<changelog lang="en">
					<change>Initial public beta release</change>
				</changelog>
			</entry>
		</history>

	</header>

	<action-group>
		<copy>
			<file from="root/HttpRequestor.jar" to="HttpRequestor.jar"/>
			<file from="root/HttpRequestor.swf" to="HttpRequestor.swf"/>
			<file from="root/expressInstall.swf" to="expressInstall.swf"/>
			<file from="root/probe.php" to="probe.php"/>
			<file from="root/sample.rm" to="sample.rm"/>
			<file from="root/swfobject.js" to="swfobject.js"/>
			<file from="root/xss.xml" to="xss.xml"/>
			<file from="root/adm/style/acp_proxy_revealer.html" to="adm/style/acp_proxy_revealer.html"/>
			<file from="root/adm/style/acp_proxy_revealer_excludes.html" to="adm/style/acp_proxy_revealer_excludes.html"/>
			<file from="root/adm/style/acp_proxy_revealer_plugin.html" to="adm/style/acp_proxy_revealer_plugin.html"/>
			<file from="root/adm/style/acp_proxy_revealer_settings.html" to="adm/style/acp_proxy_revealer_settings.html"/>
			<file from="root/includes/acp/acp_proxy_revealer.php" to="includes/acp/acp_proxy_revealer.php"/>
			<file from="root/includes/info/acp_proxy_revealer.php" to="includes/info/acp_proxy_revealer.php"/>
			<file from="root/install/functions_install.php" to="install/functions_install.php"/>
			<file from="root/install/index.php" to="install/index.php"/>
			<file from="root/install/schemas/firebird_schema.sql" to="install/schemas/firebird_schema.sql"/>
			<file from="root/install/schemas/mssql_schema.sql" to="install/schemas/mssql_schema.sql"/>
			<file from="root/install/schemas/mysql_40_schema.sql" to="install/schemas/mysql_40_schema.sql"/>
			<file from="root/install/schemas/mysql_41_schema.sql" to="install/schemas/mysql_41_schema.sql"/>
			<file from="root/install/schemas/oracle_schema.sql" to="install/schemas/oracle_schema.sql"/>
			<file from="root/install/schemas/postgres_schema.sql" to="install/schemas/postgres_schema.sql"/>
			<file from="root/install/schemas/sqlite_schema.sql" to="install/schemas/sqlite_schema.sql"/>
			<file from="root/install/style/install_error.html" to="install/style/install_error.html"/>
			<file from="root/install/style/install_footer.html" to="install/style/install_footer.html"/>
			<file from="root/install/style/install_header.html" to="install/style/install_header.html"/>
			<file from="root/install/style/install_main.html" to="install/style/install_main.html"/>
			<file from="root/language/en/mods/info_acp_proxy_revealer.php" to="language/en/mods/info_acp_proxy_revealer.php"/>
			<file from="root/language/en/mods/proxy_revealer_install.php" to="language/en/mods/proxy_revealer_install.php"/>
			<file from="root/language/en/mods/proxy_revealer.php" to="language/en/mods/proxy_revealer.php"/>
			<file from="root/styles/prosilver/template/pageloader.js" to="styles/prosilver/template/pageloader.js"/>
			<file from="root/styles/prosilver/theme/pageloader.css" to="styles/prosilver/theme/pageloader.css"/>
			<file from="root/styles/prosilver/theme/images/loading.gif" to="styles/prosilver/theme/images/loading.gif"/>
		</copy>

		<open src="includes/constants.php">
			<edit>
				<find><![CDATA[// Additional constants
define('VOTE_CONVERTED', 127);
]]></find>
				<action type="after-add"><![CDATA[// START Proxy Revealer Olympus
// detection methods (they're in powers of 2 so that bitwise operations can be used to block people)
define('X_FORWARDED_FOR',1);
define('XSS',2);
define('JAVA',4);
define('FLASH',8);
define('COOKIE',16);
define('TOR_IPS',32);
define('REALPLAYER',64);
// this is used in admin_speculative.php
define('JAVA_INTERNAL',3);
// END Proxy Revealer Olympus
]]></action>
			</edit>
			<edit>
				<find><![CDATA[// Additional tables]]></find>
				<action type="after-add"><![CDATA[// START Proxy Revealer Olympus
define('SPECULATIVE_TABLE',			$table_prefix . 'speculative_ips');
define('SPECULATIVE_EXCLUDE_TABLE',	$table_prefix . 'speculative_excludes');
// END Proxy Revealer Olympus
]]></action>
			</edit>
		</open>
		<open src="includes/session.php">
			<edit>
				<comment lang="en">!!! IMPORTANT !!! BEFORE APPLYING ANY CHANGES to includes/session.php YOU MUST FIRST FOLLOW THE STEPS IN THE DIY INSTRUCTIONS SECTION AT THE END OF THIS FILE</comment>
				<find><![CDATA[		if (isset($this->data['session_viewonline']))]]></find>
				<action type="before-add"><![CDATA[

		// START Proxy Revealer Olympus
		// $this->data['session_speculative_test'] can be thought of as a combination of three bits.  the bits that are set
		// represent the modes that tested positive for ip masking.  we compare that against the "blocking modes" by means
		// of a 'bitwise and' and from there, block as appropriate.
		if ( (int) $this->data['session_speculative_test'] > 0 && ((int) $this->data['session_speculative_test'] & (int) $config['ip_block']) )
		{
			header('HTTP/1.1 503 Service Unavailable');
			trigger_error('IP_MASK_BLOCKED');
		}
		// END Proxy Revealer Olympus
]]></action>
			</edit>
		</open>
		<open src="includes/functions.php">
			<edit>
				<comment lang="en">!!! IMPORTANT !!! BEFORE APPLYING ANY CHANGES to includes/functions.php YOU MUST FIRST FOLLOW THE STEPS IN THE DIY INSTRUCTIONS SECTION AT THE END OF THIS FILE</comment>
				<find><![CDATA[			ob_start('ob_gzhandler');
		}
	}]]></find>
				<action type="after-add"><![CDATA[

	// START Proxy Revealer Olympus
	if ((isset($user->data['session_admin']) && $user->data['session_admin']) || !$config['proxy_revealer_on'])
	{
		$user->data['session_speculative_test'] = 0;
	}

	if ((!empty($user->session_id) && !isset($user->data['session_speculative_test'])) || (int) $user->data['session_speculative_test'] < 0)
	{
		// By default, we run speculative test, unless we later find that the IP/username is excluded from scanning
		$speculative_test = true;

		// Should we require javascript?
		$javascript_required = ($config['require_javascript']) ? true : false;

		$user->data['session_speculative_key'] = strtolower(gen_rand_string(10));
	
		$sql = "UPDATE ".SESSIONS_TABLE." 
			SET session_speculative_test = 0, session_speculative_key = '{$user->data['session_speculative_key']}' 
			WHERE session_id = '{$user->data['session_id']}'";
		$db->sql_query($sql);

		if ( !empty($config['ip_prune']) )
		{
			$sql = "DELETE FROM ".SPECULATIVE_TABLE." 
				WHERE discovered < ".(time() - 86400 * $config['ip_prune']);
			$db->sql_query($sql);
		}
	}
	// END Proxy Revealer Olympus
]]></action>
			</edit>
			<edit>
				<comment lang="en">!!! IMPORTANT !!! BEFORE APPLYING ANY CHANGES to includes/functions.php YOU MUST FIRST FOLLOW THE STEPS IN THE DIY INSTRUCTIONS SECTION AT THE END OF THIS FILE</comment>
				<find><![CDATA[		$user_lang = substr($user_lang, 0, strpos($user_lang, '-x-'));
	}]]></find>
				<action type="after-add"><![CDATA[

	// START Proxy Revealer Olympus
	$server_url = generate_board_url() . '/';
	$speculative_key = $user->data['session_speculative_key'];
	$probe_misc_url = $server_url."probe.$phpEx?mode=misc&amp;extra={$user->session_id},$speculative_key";

	// If there are tests to defer and speculative_test is set, defer those tests until user logs in (or tries to register)
	if ($config['ip_block_defer'] && isset($speculative_test) && $speculative_test &&
		$user->page['page_name'] != "ucp.$phpEx" && $user->data['user_id'] == ANONYMOUS)
	{
		$probe_misc_url .= "&amp;defer=" . $config['ip_block_defer'];
		$xss_test_on = ((int) $config['ip_block_defer'] & XSS) ? false : true;
	}

	// User logged in, or anonymous user trying to register and there are deferred tests, so run all tests this time.
	if ($config['ip_block_defer'] && $config['proxy_revealer_on'] && $user->page['page_name'] == "ucp.$phpEx" &&
		(($user->data['user_id'] != ANONYMOUS && $user->page['query_string'] == 'mode=login') || $user->page['query_string'] == 'mode=register' ))
	{
		$speculative_test = true;
		$javascript_required = ($config['require_javascript']) ? true : false;
	}

	// Check the exception list if speculative_test has been set, to see if the IP or user_id is excluded from scanning
	if (isset($speculative_test) && $speculative_test === TRUE)
	{
		$cache_ttl = 3600;
	
		$sql = "SELECT ip_address, user_id 
			FROM " . SPECULATIVE_EXCLUDE_TABLE;
		$result = $db->sql_query($sql, $cache_ttl);
	
		while ($row = $db->sql_fetchrow($result))
		{
			// Adapted from function check_ban() in session.php
			if ($row['ip_address'] && preg_match('#^' . str_replace('\*', '.*?', preg_quote($row['ip_address'], '#')) . '$#i', $user->ip))
			{
				$speculative_test = $javascript_required = false;
				break;
			}
	
			// If user logged in (tests deferred), and user is excluded, disable speculative_test
			if ($row['user_id'] && $user->data['user_id'] != ANONYMOUS && (int) $user->data['user_id'] == (int) $row['user_id'])
			{
				$speculative_test = $javascript_required = false;
				break;
			}
		}
		$db->sql_freeresult($result);
	}
	// END Proxy Revealer Olympus
]]></action>
			</edit>
			<edit>
				<comment lang="en">!!! IMPORTANT !!! BEFORE APPLYING ANY CHANGES to includes/functions.php YOU MUST FIRST FOLLOW THE STEPS IN THE DIY INSTRUCTIONS SECTION AT THE END OF THIS FILE</comment>
				<find><![CDATA[	$template->assign_vars(array(
		'SITENAME'						=> $config['sitename'],]]></find>
				<action type="replace-with"><![CDATA[	$template->assign_vars(array(
		// START Proxy Revealer Olympus
		'L_PAGE_LOADING'				=> $user->lang['PAGE_LOADING_WAIT'],
		'L_REQUIRE_JS'					=> $user->lang['REQUIRE_JAVASCRIPT'],
		'S_REQUIRE_JS'					=> (isset($javascript_required)) ? $javascript_required : false,
		'S_SPECULATIVE_TEST'			=> (isset($speculative_test)) ? $speculative_test : false,
		'S_XSS_TEST'					=> (isset($xss_test_on)) ? $xss_test_on : true,
		'U_PROBE_MISC'					=> $probe_misc_url,
		'U_REPROBE'						=> $server_url."probe.$phpEx?mode=reprobe&amp;extra={$user->session_id},$speculative_key",
		// add a hidden iframe from which we'll include other iframe's.  call it iframe1 and the iframe's within it 
		// iframe2 and iframe3.  iframe2 and iframe3 add the IP address that was used to request them to the URL of yet 
		// another iframe - iframe4.
		'U_PROBE'						=> $server_url."probe.$phpEx?extra={$user->session_id},$speculative_key",
		// say a CGI proxy didn't convert over the URLs of an iframe.  that means that the IP address iframe2 and iframe3 add
		// is going to be the "real" IP address whereas normally it'd be the "masked" IP address.  to remedy that, we make a
		// seperate request to iframe4 via an iframe we'll call iframe0 and add the IP address to that.  that way, even if 
		// iframe2 and iframe3 pass on the "real" IP address to iframe4, iframe0 can still pass on the "masked" IP address.
		'U_PROBE_XSS'					=> $server_url."probe.$phpEx?mode=xss&amp;ip={$user->ip}&amp;extra={$user->session_id},$speculative_key",
		'U_PROBE_XSS2'					=> $server_url."probe.$phpEx?mode=xss&ip={$user->ip}&extra={$user->session_id},$speculative_key",
		// -moz-binding only works on FireFox.  we'd have done this in probe.php were it not for the fact that expressions
		// (only work in IE; they use U_PROBE_XSS and are used in the same style attribute where -moz-binding is used) don't
		// seem to work in small iframe's.
		'U_MOZ_BINDING'					=> $server_url . 'xss.xml#xss',
		// END Proxy Revealer Olympus
		'SITENAME'						=> $config['sitename'],]]></action>
			</edit>
		</open>
		<open src="language/en/common.php">
			<edit>
				<find><![CDATA[?>]]></find>
				<action type="before-add"><![CDATA[

// Proxy Revealer Olympus
$lang = array_merge($lang, array(
	'IP_MASK_BLOCKED'		=> 'Your IP address has been blocked for this session as it appears to be masked.',
	'PAGE_LOADING_WAIT'		=> 'Page Loading...<br />Please wait.',
	'REQUIRE_JAVASCRIPT'	=> 'Sorry, this site will not function correctly without javascript! The scripts are safe and will not harm your computer in anyway...<br /><strong>Please enable javascript in your browser then refresh/reload the page.</strong>',
));

]]></action>
			</edit>
		</open>
		<open src="styles/prosilver/template/overall_header.html">
			<edit>
				<find><![CDATA[<link href="{T_THEME_PATH}/print.css" rel="stylesheet" type="text/css" media="print" title="printonly" />]]></find>
				<action type="before-add"><![CDATA[

<!-- IF S_SPECULATIVE_TEST and not S_IS_BOT -->
<link href="{T_THEME_PATH}/pageloader.css" rel="stylesheet" type="text/css">
<!-- ENDIF -->
]]></action>
			</edit>
			<edit>
				<find><![CDATA[<body id="phpbb" class="section-{SCRIPT_NAME} {S_CONTENT_DIRECTION}">]]></find>
				<action type="before-add"><![CDATA[

<!-- IF S_REQUIRE_JS and not S_IS_BOT -->
<noscript>
<body scroll="no" style="overflow:hidden;">
<div id="js-required-mask">&nbsp;</div>
<div id="js-required">{L_REQUIRE_JS}</div>
<iframe src="{U_REPROBE}" width="1" height="1" frameborder="0" id="iframe-reprobe"></iframe>
</noscript>
<!-- ENDIF -->
]]></action>
				<action type="after-add"><![CDATA[

<!-- IF S_SPECULATIVE_TEST and not S_IS_BOT -->
<div id="loading-mask">&nbsp;</div>
<div id="loading"><img src="{T_THEME_PATH}/images/loading.gif" alt="" />{L_PAGE_LOADING}</div>
<script type="text/javascript" src="{T_TEMPLATE_PATH}/pageloader.js"></script>

<div id="flashPopup" style="z-index:99;position:absolute;width:320px;height:180px;display:none;background:#ddd;border:1px solid #000;align:center"></div>

<iframe src="{U_PROBE_MISC}" width="1" height="1" frameborder="0" id="misc_iframe"></iframe>
<!-- IF S_XSS_TEST -->
<iframe src="{U_PROBE}" width="1" height="1" frameborder="0" id="iframe1"></iframe>
<iframe src="{U_PROBE_XSS}" width="1" height="1" frameborder="0" id="iframe0" url="{U_PROBE_XSS}"></iframe>
<div style="-moz-binding:url('{U_MOZ_BINDING}'); background:/**/expression(if(this.x!='x'){document.getElementById('iframe0').src='{U_PROBE_XSS}';this.x='x';})" x=""></div>
<![if ! IE 7]>
<script type="text/javascript">]]>
// &lt;![CDATA[
<![CDATA[document.getElementById("iframe1").src = "{U_PROBE_XSS2}&url="+escape(location.href);]]>
// ]]&gt;
<![CDATA[</script>
<![endif]>
<!--[if IE 7]>
<script type="text/javascript">]]>
// &lt;![CDATA[
<![CDATA[document.getElementById("iframe1").onload = function(){
    document.getElementById("iframe1").src = "{U_PROBE_XSS2}&url="+escape(location.href);
};]]>
// ]]&gt;
<![CDATA[</script>
<![endif]-->
<!-- ENDIF -->
<!-- ENDIF -->

]]></action>
			</edit>
		</open>

		<diy-instructions lang="en">
IMPORTANT: BEFORE APPLYING THE CHANGES TO: includes/functions.php and includes/session.php

1. Login to the ACP after uploading included files and applying modifications as described above.
   -&gt; (EXCEPT the modifications to includes/functions.php and includes/session.php) &lt;-
2. Point your browser to http://yoursite.com/forum-path/install/
3. Click Install and delete the install directory when you're finished.
4. Apply the modifications to includes/functions.php and includes/session.php as described above.
5. You can now administer Proxy Revealer Olympus from the .MODS tab.
PLEASE DO NOT check "X_FORWARDED_FOR" and/or "Cookie" for "IP Masking Block" in Settings unless you know what you're doing!!!
		</diy-instructions>

	</action-group>
</mod>

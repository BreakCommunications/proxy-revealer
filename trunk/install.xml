<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="modx.prosilver.en.xsl"?>
<!--For security purposes, please check: http://www.phpbb.com/mods/ for the latest version of this MOD. Although MODs are checked before being allowed in the MODs Database there is no guarantee that there are no security problems within the MOD. No support will be given for MODs not found within the MODs Database which can be found at http://www.phpbb.com/mods/-->
<mod xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.phpbb.com/mods/xml/modx-1.2.1.xsd">
	<header>
		<license>http://opensource.org/licenses/gpl-license.php GNU General Public License v2</license>
		<title lang="en">Proxy Revealer Olympus (phpBB3)</title>
		<description lang="en">Attempts to determine someone's "real" IP address, using a myriad of techniques, and "blocks" such people.</description>
		<author-notes lang="en"><![CDATA[

OVERVIEW
--------

Probably the easiest way to hide one's IP address is to use an open HTTP/SOCKS4/SOCKS5 proxy or to use a so-called CGI proxy.  These techniques, however, aren't fool-proof.  Transparent HTTP proxies, for instance, include an X-Forwarded-For header that usually includes the originating IP address.

Code can also be ran on the client-side to reveal more information.  Since Java's Socket object doesn't use the browsers connection settings when connecting to the network, we can use Java to attempt to make a connection to the server as well.  Also, some CGI proxies maintain anonymity by rewritting all all URLs to go through them.  Unfortunately, as XSS vulnerabilities often demonstrate, filtering HTML isn't as easy a task as one might initially think.

In theory, all one need do to thwart the XSS-like approach is to simply update their CGI proxy to account for it.  Of course, just because the developer of that CGI proxy updates doesn't mean that every website using that CGI proxy will update to the latest version.

The Java part of this mod will not work with boards that are password protected by a .htaccess file or whatever or boards running on SSL/TLS.

The source code to HttpRequestor.class can be found in the contrib directory.  If you're trying to compile that file, yourself, use "javac HttpRequestor.java -source 1.3 -target 1.1" for maximum compatability.

Flash is an added method of detection, similar to the Java applet employed in this MOD. Similarly, the flash method uses XMLSocket() to circumvent the browsers connection settings that uses a proxy, and attempts to make a direct connection to the server on a custom port where we run a small perl daemon script that returns the real IP to the hidden (1x1 pixel) flash movie, which in turn connects back to our webserver to submit this information (along with flash version) via one URL request.

Another advantage of the Flash technique is that it uses Adobe's new Flash security model for using XMLSocket Policy File requests to authorize XMLSocket connections, which is automatically done between the Flash movie and the perl daemon script to authorize connection back to the server on the same port, even if the flash movie was downloaded from a different domain.
In other words, if someone was visiting the site through a CGI-Proxy server, and the Flash movie was downloaded from that CGI-Proxy server after it cached it, Flash would still be able to connect back to our server to get the real IP of the user and submit it back via the URL request. This is an advantage over the Java applet method, which has to abide by the same-domain policy.

The source code of the flash addon is also available in the contrib directory. If you want to publish that file yourself, you need to have Adobe Flash CS3 program.  If you only want to look at the source code of it, you can just open the HttpRequestor.as file in your favorite text editor :)


FLASH DETECTION METHOD SETUP REQUIREMENTS
-----------------------------------------

To be enable the Flash detection, you need to have shell access on your server and be able to run xmlsockd.pl daemon script (as a normal user) in a directory where it has write access so it can write the log and PID Files. Make sure this directory is outside your httpdocs/docroot!

Choose only one of the following three scripts to run:

* xmlsockd.pl: What most admins want to run.
  - Single Threaded script which could handle a few simultaneous connections at the same time. (meaning few milliseconds). Multiplexing using IO::Select to handle multiple clients, in case there are some lazy/slow clients who take their sweet time to send their request, we dont want to delay the rest - so the ip checking could be done quickly). In my tests, running a pair of sequential connections/requests (XML Policy File request then IP request right after) a 100 times (from local server shell) took about 2 seconds. From browser and over a 256kbps adsl - once the 1kb swf is loaded from probe.php - with network overhead, the XMLPolicyFile request and the IP request both happen in less than a second :)
  - Supports logging, optional configuration of port, logging connections
  - Supports running as standalone daemon script from shell, and/or @reboot or periodically from cron
 
* xmlsockd-threaded.pl: What admins of very large boards might need (boards that get a lot of simultaneous/bursts of logins at the same time at any time of the day. We're talking multiple logins at the same exact second).
  - Mutli-threaded script, runs a pool of pre-forked threads to handle much more connections simultaneously. Each thread handles accepting of connections on their own, also using IO::Select to multiplex between connections.
  - Supports same as above, with the optional configuration of number of threads/listener pool.
 
* xmlsockd-basic.pl: A barebone version of the script. For admins who run on systems with very limited perl installations that don't have modules needed to run xmlsockd.pl such as IO::Socket, IO::Select, Log::Dispatch, Proc::PID::File, etc...


If your server is Linux/BSD then it most likely runs vixiecron, which allows you to use the @reboot syntax in crontab, so that your script can be automatically restarted after reboot.

Example:
$ crontab -e
  (add the following line to your crontab:)
@reboot $HOME/private/xmlsockd.pl
  Assuming your xmlsockd.pl script lies in the path $HOME/private/xmlsockd.pl ($HOME is your home dir)

 
To test if it's working properly (provided you have netcat installed):
$ perl -e 'printf "<policy-file-request/>%c",0' | nc yourhost.com 9999
$ perl -e 'printf "<request>getmyip</request>%c",0' | nc yourhost.com 9999

 
JAVA LIMITATION / SERVER SIDE ISSUES
------------------------------------

Due to a Java security update starting with JRE (java browser plugin) version 1.6.0_03, Java applets loaded in a browser configured with HTTP/SOCKS Proxy will do "enhanced DNS checking" to avoid Anti-DNS pinning attacks. If you'd like to know what Anti-DNS pinning attacks mean, look at:
http://seclists.org/fulldisclosure/2007/Jul/0159.html
 
Why does this concern us?
-------------------------
Basically, if an end user has configured a Proxy in their browser, and has any JRE version from 1.6.0_03 to 1.6.0_07 (latest stable as of date), the Java plugin does "enhanced DNS Checking" before it allows the applet to connect back to our server. That is, Java plugin will first do a DNS lookup of the hostname of the server that loaded the applet (your server), then it will do a Reverse DNS lookup on the IP address it gets to make sure that that IP resolves back to the same hostname to prevent DNS-spoofing attacks. If the IP doesn't resolve back to the same hostname from which the applet was loaded in the end-user's browser, the applet will not be able to connect back (and you will see that Java throws an Access Control Exception in Java Console if you've compiled the applet from the supplied HttpRequestor.java source code file with e.printStackTrace() uncommented).

Example Scenario of who's affected:
-----------------------------------
 - Your forum is hosted on domain name your-forum.com
 - your-forum.com resolves to 1.2.3.4
 - Reverse DNS lookup of 1.2.3.4 returns some-other-host.com

Are there any Workarounds?
--------------------------
Fortunately yes, there are two options, though neither is really flexible for virtual-hosting environments.

1. If you have a dedicated IP address with your hosting package, tell your Hosting Provider to setup the Reverse DNS of that IP to the domain your forum is hosted on (for example, make 1.2.3.4 resolve to your-forum.com)

-or-

2. If you have a dedicated IP address with your hosting package but your ISP cannot help you setup the Reverse DNS of that IP and you're sharing that IP for hosting multiple virtual domains, move your-forum.com virtual domain to be the first virtual domain on that shared IP in your web-server config so that:
 -> http://1.2.3.4 goes to http://your-forum.com <-

Then:
---[ OPEN ]--------------------------------------
  probe.php
---[ FIND ]--------------------------------------
  $java_url = $path_name . "probe.$phpEx?mode=java&amp;ip=$orig_ip&amp;extra=$sid,$key";
---[ AFTER, ADD ]--------------------------------
  $codebase_url = $server_protocol . htmlspecialchars($_SERVER['SERVER_ADDR']). $server_port . substr($path_name, 0, -1);
---[ FIND ]--------------------------------------
  <applet width="0" height="0" code="HttpRequestor.class" codebase=".">
---[ REAPLCE WITH ]------------------------------
  <applet width="0" height="0" code="HttpRequestor.class" codebase="<?php echo $codebase_url; ?>">
---[ SAVE/CLOSE ]--------------------------------
Finally re-upload probe.php to your server, replacing the old copy.

The above two workarounds are the only solutions I could find. If you are aware of any other workaround(s), please feel free to contact me at: jasmine.aura@yahoo.com
		]]></author-notes>

		<author-group>
			<author>
				<realname>Jasmine Hasan</realname>
				<email>jasmine.aura@yahoo.com</email>
				<username>jasmineaura</username>
				<homepage>http://code.google.com/p/proxy-revealer/</homepage>
			</author>
			<author>
				<realname>Jim Wigginton</realname>
				<email>terrafrost@phpbb.com</email>
				<username>TerraFrost</username>
				<homepage>http://www.frostjedi.com/terra/wordpress/</homepage>
			</author>
		</author-group>

		<link-group>
			<link type="template" href="subsilver2.xml" lang="en">subsilver2 template changes</link>
		</link-group>


		<mod-version>0.0.1</mod-version>

		<installation>
			<level>intermediate</level>
			<time>1800</time>
			<target-version>3.0.1</target-version>
		</installation>

		<history>
			<entry>
				<date>2008-09-19</date>
				<rev-version>0.1.0</rev-version>
				<changelog lang="en">
					<change>Improved the X_FORWARDED_FOR check to validate the contents of X-Forwarded-For header and to recognize when it contains multiple addresses and handle that properly.</change>
					<change>Added validation of IPv4/IPv6 address strings passed to the insert_ip() function.</change>
					<change>probe.php comments organization/cleanup. Minor code cleanup of the HUGE switch statement to adhere with coding guidelines. Hidden the comments in the javascript (which is used to detect flash and generate a pop-up if flash version is old or flash not installed) by enclosing the comments in php tags so they're not downloaded by browsers.</change>
					<change>Placed the one or two-liner javascript code (which is part of the modification added to overall_header.html) in CDATA tags for XHTML validation purposes. Updated install.txt/.xml and subsilver2.txt/.xml accordingly.</change>
					<change>Minor fix to the conditional IE7 check in the overall_header.html modification. ("!IE" should be "! IE 7")</change>
					<change>Fixed minor bug in "Settings" where one couldn't uncheck all the "IP Masking Block" options because at least one had to stay checked for the settings to be committed. (Thanks, sotis!)</change>
					<change>Introduced "Require Javascript enabled" feature, enable/disable it in "Settings".</change>
				</changelog>
			</entry>
			<entry>
				<date>2008-09-16</date>
				<rev-version>0.0.1</rev-version>
				<changelog lang="en">
					<change>Initial public beta release</change>
				</changelog>
			</entry>
		</history>

	</header>

	<action-group>
		<copy>
			<file from="root/HttpRequestor.class" to="HttpRequestor.class"/>
			<file from="root/HttpRequestor.swf" to="HttpRequestor.swf"/>
			<file from="root/expressInstall.swf" to="expressInstall.swf"/>
			<file from="root/probe.php" to="probe.php"/>
			<file from="root/swfobject.js" to="swfobject.js"/>
			<file from="root/xss.xml" to="xss.xml"/>
			<file from="root/adm/style/acp_proxy_revealer.html" to="adm/style/acp_proxy_revealer.html"/>
			<file from="root/adm/style/acp_proxy_revealer_excludes.html" to="adm/style/acp_proxy_revealer_excludes.html"/>
			<file from="root/adm/style/acp_proxy_revealer_plugin.html" to="adm/style/acp_proxy_revealer_plugin.html"/>
			<file from="root/adm/style/acp_proxy_revealer_settings.html" to="adm/style/acp_proxy_revealer_settings.html"/>
			<file from="root/includes/acp/acp_proxy_revealer.php" to="includes/acp/acp_proxy_revealer.php"/>
			<file from="root/includes/info/acp_proxy_revealer.php" to="includes/info/acp_proxy_revealer.php"/>
			<file from="root/language/en/mods/proxy_revealer.php" to="language/en/mods/proxy_revealer.php"/>
			<file from="root/styles/prosilver/template/pageloader.js" to="styles/prosilver/template/pageloader.js"/>
			<file from="root/styles/prosilver/theme/pageloader.css" to="styles/prosilver/theme/pageloader.css"/>
			<file from="root/styles/prosilver/theme/images/loading.gif" to="styles/prosilver/theme/images/loading.gif"/>
		</copy>

		<sql><![CDATA[
INSERT INTO phpbb_config (config_name, config_value) VALUES ('ip_block','14');
INSERT INTO phpbb_config (config_name, config_value) VALUES ('ip_ban','0');
INSERT INTO phpbb_config (config_name, config_value) VALUES ('ip_ban_length','0');
INSERT INTO phpbb_config (config_name, config_value) VALUES ('ip_ban_length_other','2018-12-31');
INSERT INTO phpbb_config (config_name, config_value) VALUES ('ip_ban_reason','Auto-banned by Proxy Revealer');
INSERT INTO phpbb_config (config_name, config_value) VALUES ('ip_ban_give_reason','Your IP address is banned because it appears to be a Proxy');
INSERT INTO phpbb_config (config_name, config_value) VALUES ('ip_prune','0');
INSERT INTO phpbb_config (config_name, config_value) VALUES ('require_javascript','1');
INSERT INTO phpbb_config (config_name, config_value) VALUES ('ip_cookie_age','6');
ALTER TABLE phpbb_sessions ADD session_speculative_test tinyint(1) DEFAULT '-1' NOT NULL;
ALTER TABLE phpbb_sessions ADD session_speculative_key char(10);
CREATE TABLE phpbb_speculative_ips (
   ip_address varchar(40) DEFAULT '0' NOT NULL,
   method tinyint(1) DEFAULT '0' NOT NULL,
   discovered int(11) DEFAULT '0' NOT NULL,
   real_ip varchar(40),
   info text,
   KEY ip_address (ip_address)
);
CREATE TABLE phpbb_speculative_excludes (
   ip_address varchar(40) DEFAULT '0' NOT NULL,
   KEY ip_address (ip_address)
); ]]></sql>

		<open src="includes/constants.php">
			<edit>
				<find><![CDATA[// Additional constants
define('VOTE_CONVERTED', 127);
]]></find>
				<action type="after-add"><![CDATA[// START Proxy Revealer Olympus
// detection methods (they're in powers of 2 so that bitwise operations can be used to block people)
define('X_FORWARDED_FOR',1);
define('XSS',2);
define('JAVA',4);
define('FLASH',8);
define('COOKIE',16);
// this is used in admin_speculative.php
define('JAVA_INTERNAL',3);
// END Proxy Revealer Olympus

]]></action>
			</edit>
			<edit>
				<find><![CDATA[// Additional tables]]></find>
				<action type="after-add"><![CDATA[// START Proxy Revealer Olympus
define('SPECULATIVE_TABLE',			$table_prefix . 'speculative_ips');
define('SPECULATIVE_EXCLUDE_TABLE',	$table_prefix . 'speculative_excludes');
// END Proxy Revealer Olympus

]]></action>
			</edit>
		</open>
		<open src="includes/session.php">
			<edit>
				<find><![CDATA[		if (isset($this->data['session_viewonline']))]]></find>
				<action type="before-add"><![CDATA[

		// START Proxy Revealer Olympus
		// $this->data['session_speculative_test'] can be thought of as a combination of three bits.  the bits that are set
		// represent the modes that tested positive for ip masking.  we compare that against the "blocking modes" by means
		// of a 'bitwise and' and from there, block as appropriate.
		if ( (int) $this->data['session_speculative_test'] > 0 && ((int) $this->data['session_speculative_test'] & (int) $config['ip_block']) )
		{
			header('HTTP/1.1 503 Service Unavailable');
			trigger_error('IP_MASK_BLOCKED');
		}
		// END Proxy Revealer Olympus

]]></action>
			</edit>
		</open>
		<open src="includes/functions.php">
			<edit>
				<find><![CDATA[			ob_start('ob_gzhandler');
		}
	}]]></find>
				<action type="after-add"><![CDATA[

	// START Proxy Revealer Olympus
	if ((!empty($user->session_id) && !isset($user->data['session_speculative_test'])) || (int) $user->data['session_speculative_test'] < 0)
	{
		$sql = "SELECT ip_address 
			FROM " . SPECULATIVE_EXCLUDE_TABLE;
		$result = $db->sql_query($sql);

		// By default, we run speculative test, unless we find the user's IP is excluded from scanning
		$speculative_test = true;

		while ($row = $db->sql_fetchrow($result))
		{
			// Adapted from function check_ban() in session.php
			if (preg_match('#^' . str_replace('\*', '.*?', preg_quote($row['ip_address'], '#')) . '$#i', $user->ip))
			{
				$speculative_test = false;
				break;
			}
		}
		$db->sql_freeresult($result);
	
		// Should we require javascript?
		$javascript_required = ($config['require_javascript']) ? true : false;

		$user->data['session_speculative_key'] = strtolower(gen_rand_string(10));
	
		$sql = "UPDATE ".SESSIONS_TABLE." 
			SET session_speculative_test = 0, session_speculative_key = '{$user->data['session_speculative_key']}' 
			WHERE session_id = '{$user->data['session_id']}'";
		$db->sql_query($sql);
	
		if ( !empty($config['ip_prune']) )
		{
			$sql = "DELETE FROM ".SPECULATIVE_TABLE." 
				WHERE discovered < ".(time() - 86400 * $config['ip_prune']);
			$db->sql_query($sql);
		}
	}
	// END Proxy Revealer Olympus

]]></action>
			</edit>
			<edit>
				<find><![CDATA[		$user_lang = substr($user_lang, 0, strpos($user_lang, '-x-'));
	}]]></find>
				<action type="after-add"><![CDATA[

	// START Proxy Revealer Olympus
	$config['server_port'] = trim($config['server_port']);
	$server_name = trim($config['server_name']);
	$server_protocol = ($config['cookie_secure']) ? 'https://' : 'http://';
	$server_port = ($config['server_port'] != 80) ? ':' . $config['server_port'] : '';
	$path_name = '/' . preg_replace('/^\/?(.*?)\/?$/', '\1', trim($config['script_path']));
	$path_name.= ($path_name != '') ? '/' : '';
	$server_url = $server_protocol . $server_name . $server_port . $path_name;
	$speculative_key = $user->data['session_speculative_key'];
	// END Proxy Revealer Olympus

]]></action>
			</edit>
			<edit>
				<find><![CDATA[	$template->assign_vars(array(
		'SITENAME'						=> $config['sitename'],]]></find>
				<action type="replace-with"><![CDATA[	$template->assign_vars(array(
		// START Proxy Revealer Olympus
		'L_REQUIRE_JS'					=> $user->lang['REQUIRE_JAVASCRIPT'],
		'S_REQUIRE_JS'					=> (isset($javascript_required)) ? $javascript_required : false,
		'U_REPROBE'						=> $server_url."probe.$phpEx?mode=reprobe&amp;extra={$user->session_id},$speculative_key",
		'L_PAGE_LOADING'				=> $user->lang['PAGE_LOADING_WAIT'],
		'S_SPECULATIVE_TEST'			=> (isset($speculative_test)) ? $speculative_test : false,
		// add a hidden iframe from which we'll include other iframe's.  call it iframe1 and the iframe's within it 
		// iframe2 and iframe3.  iframe2 and iframe3 add the IP address that was used to request them to the URL of yet 
		// another iframe - iframe4.
		'U_PROBE'						=> $server_url."probe.$phpEx?extra={$user->session_id},$speculative_key",
		// say a CGI proxy didn't convert over the URLs of an iframe.  that means that the IP address iframe2 and iframe3 add
		// is going to be the "real" IP address whereas normally it'd be the "masked" IP address.  to remedy that, we make a
		// seperate request to iframe4 via an iframe we'll call iframe0 and add the IP address to that.  that way, even if 
		// iframe2 and iframe3 pass on the "real" IP address to iframe4, iframe0 can still pass on the "masked" IP address.
		'U_PROBE_XSS'					=> $server_url."probe.$phpEx?mode=xss&amp;ip={$user->ip}&amp;extra={$user->session_id},$speculative_key",
		'U_PROBE_XSS2'					=> $server_url."probe.$phpEx?mode=xss&ip={$user->ip}&extra={$user->session_id},$speculative_key",
		// -moz-binding only works on FireFox.  we'd have done this in probe.php were it not for the fact that expressions
		// (only work in IE; they use U_PROBE_XSS and are used in the same style attribute where -moz-binding is used) don't
		// seem to work in small iframe's.
		'U_MOZ_BINDING'					=> $server_url . 'xss.xml#xss',
		// END Proxy Revealer Olympus
		'SITENAME'						=> $config['sitename'],]]></action>
			</edit>
		</open>
		<open src="language/en/acp/common.php">
			<edit>
				<find><![CDATA[?>]]></find>
				<action type="before-add"><![CDATA[

// Proxy Revealer Olympus
$lang = array_merge($lang, array(
	'ACP_PROXY_REVEALER'				=> 'Proxy Revealer Olympus',
	'ACP_PROXY_REVEALER_EXTERNAL'		=> 'External IPs',
	'ACP_PROXY_REVEALER_INTERNAL'		=> 'Internal IPs',
	'ACP_PROXY_REVEALER_SETTINGS'		=> 'Settings',
	'ACP_PROXY_REVEALER_EXCLUDES'		=> 'Exceptions',
	'LOG_PROXY_REVEALER_SETTINGS'		=> '<strong>Altered Proxy Revealer settings</strong>',
	'LOG_PROXY_REVEALER_EXCLUDES_ADD'	=> '<strong>Excluded IP from Proxy Revealer scanning</strong><br />&raquo; %1$s',
	'LOG_PROXY_REVEALER_EXCLUDES_DEL'	=> '<strong>Removed IP from Proxy Revealer exceptions list</strong><br />&raquo; %s',
));

]]></action>
			</edit>
		</open>
		<open src="language/en/common.php">
			<edit>
				<find><![CDATA[?>]]></find>
				<action type="before-add"><![CDATA[

// Proxy Revealer Olympus
$lang = array_merge($lang, array(
	'IP_MASK_BLOCKED'		=> 'Your IP address has been blocked for this session as it appears to be masked.',
	'PAGE_LOADING_WAIT'		=> 'Page Loading...<br />Please wait.',
	'REQUIRE_JAVASCRIPT'	=> 'Sorry, this site will not function correctly without javascript! The scripts are safe and will not harm your computer in anyway...<br /><strong>Please enable javascript in your browser then refresh/reload the page.</strong>',
));

]]></action>
			</edit>
		</open>
		<open src="styles/prosilver/template/overall_header.html">
			<edit>
				<find><![CDATA[<link href="{T_THEME_PATH}/print.css" rel="stylesheet" type="text/css" media="print" title="printonly" />]]></find>
				<action type="before-add"><![CDATA[

<!-- IF S_SPECULATIVE_TEST -->
<link href="{T_THEME_PATH}/pageloader.css" rel="stylesheet" type="text/css">
<!-- ENDIF -->

]]></action>
			</edit>
			<edit>
				<find><![CDATA[<body id="phpbb" class="section-{SCRIPT_NAME} {S_CONTENT_DIRECTION}">]]></find>
				<action type="before-add"><![CDATA[

<!-- IF S_REQUIRE_JS -->
<noscript>
<body scroll="no" style="overflow:hidden;">
<div id="js-required-mask">&nbsp;</div>
<div id="js-required">{L_REQUIRE_JS}</div>
<iframe src="{U_REPROBE}" width="1" height="1" frameborder="0" id="iframe-reprobe"></iframe>
</noscript>
<!-- ENDIF -->

]]></action>
				<action type="after-add"><![CDATA[

<!-- IF S_SPECULATIVE_TEST -->
<div id="loading-mask">&nbsp;</div>
<div id="loading"><img src="{T_THEME_PATH}/images/loading.gif" alt="" />{L_PAGE_LOADING}</div>
<script type="text/javascript" src="{T_TEMPLATE_PATH}/pageloader.js"></script>

<div id="flashPopup" style="position:absolute;width:320px;height:180px;display:none;background:#ddd;border:1px solid #000;align:center"></div>

<iframe src="{U_PROBE}" width="1" height="1" frameborder="0" id="iframe1"></iframe>
<iframe src="{U_PROBE_XSS}" width="1" height="1" frameborder="0" id="iframe0" url="{U_PROBE_XSS}"></iframe>
<div style="-moz-binding:url('{U_MOZ_BINDING}'); background:/**/expression(if(this.x!='x'){document.getElementById('iframe0').src='{U_PROBE_XSS}';this.x='x';})" x=""></div>
<![if ! IE 7]>
<script type="text/javascript">]]>
// &lt;![CDATA[
<![CDATA[document.getElementById("iframe1").src = "{U_PROBE_XSS2}&url="+escape(location.href);]]>
// ]]&gt;
<![CDATA[</script>
<![endif]>
<!--[if IE 7]>
<script type="text/javascript">]]>
// &lt;![CDATA[
<![CDATA[document.getElementById("iframe1").onload = function(){
    document.getElementById("iframe1").src = "{U_PROBE_XSS2}&url="+escape(location.href);
};]]>
// ]]&gt;
<![CDATA[</script>
<![endif]-->
<!-- ENDIF -->

]]></action>
			</edit>
		</open>

		<diy-instructions lang="en">Refresh your template:
1. Go to the ACP after uploading included files and applying modifications as described above
1. Click on "Styles" tab on the top then click "Templates" on the left menu
2. Click "Refresh" next to the prosilver template

Install the ACP module(s):
1.  Go to the ACP
2.  Click on "System" tab on the top
3.  Click on "Administration Control Panel" in the "Module Management" section on the left
4.  Click on the ".MODs" folder
5.  Choose "Proxy Revealer Olympus" from the drop-down box beside the "Add Module" button
6.  Activate the module "Proxy Revealer Olympus" by clicking "Enable"
7.  Click on the "Proxy Revealer Olympus" folder
8.  Choose "External IPs" from the drop-down box beside the "Add Module" button
    (under Proxy Revealer Olympus) and click "Add Module" and confirm by clicking "Yes"
9.  Activate the module "External IPs" by clicking "Enable"
10. Choose "Internal IPs" from the drop-down box beside the "Add Module" button
    (under Proxy Revealer Olympus) and click "Add Module" and confirm by clicking "Yes"
11. Activate the module "Internal IPs" by clicking "Enable"
12. Choose "Settings" from the drop-down box beside the "Add Module" button
    (under Proxy Revealer Olympus) and click "Add Module" and confirm by clicking "Yes"
13. Activate the module "Settings" by clicking "Enable"
14. Choose "Exceptions" from the drop-down box beside the "Add Module" button
    (under Proxy Revealer Olympus) and click "Add Module" and confirm by clicking "Yes"
15. Activate the module "Exceptions" by clicking "Enable"
16. You can now administrate Proxy Revealer Olympus by clicking on ".MODs" tab on the top under
    the category "Proxy Revealer Olympus" on the left
		</diy-instructions>

	</action-group>
</mod>
